# Cell 9.1: Training Pipeline - Konfigurasi dan inisialisasi pipeline training

import os
import torch
import gc
import time
import yaml
from pathlib import Path
from datetime import datetime
from tqdm.auto import tqdm
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML
import pickle
import numpy as np
from contextlib import contextmanager

# Pastikan path diatur dengan benar
import sys
if os.getcwd() not in sys.path:
    sys.path.append(os.getcwd())

# Pastikan direktori output ada
os.makedirs("runs/train", exist_ok=True)
os.makedirs("runs/train/weights", exist_ok=True)
os.makedirs("logs", exist_ok=True)

# Context manager untuk manajemen memori
@contextmanager
def memory_manager():
    """Context manager untuk optimasi penggunaan memori."""
    try:
        yield
    finally:
        gc.collect()
        if torch.cuda.is_available():
            torch.cuda.empty_cache()

# Import modul yang diperlukan
try:
    from smartcash.utils.logger import get_logger, SmartCashLogger
    from smartcash.utils.training_pipeline import TrainingPipeline
    from smartcash.handlers.model_handler import ModelHandler
    from smartcash.handlers.data_manager import DataManager
    from smartcash.handlers.checkpoint_handler import CheckpointHandler
    from smartcash.utils.early_stopping import EarlyStopping
    from smartcash.utils.experiment_tracker import ExperimentTracker
    
    # Setup logger dengan emoji kontekstual
    logger = get_logger("training_manager", log_to_console=True, log_to_file=True, log_to_colab=True)
    logger.info("‚úÖ Modul training berhasil diimport")
except Exception as e:
    print(f"‚ùå Error saat import modul training: {str(e)}")
    import traceback
    traceback.print_exc()
    
    # Fallback ke logger standard
    import logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger("training_manager")

# ===== 1. LOAD CONFIG =====
def get_config():
    """Memuat konfigurasi dari file yang tersimpan."""
    config_files = [
        'config.pkl',                  # Pickle dari cell sebelumnya
        'configs/training_config.yaml',  # YAML dari sistem file
        'configs/base_config.yaml',     # Fallback default
    ]
    
    for config_file in config_files:
        try:
            if config_file.endswith('.pkl'):
                with open(config_file, 'rb') as f:
                    return pickle.load(f)
            else:
                with open(config_file, 'r') as f:
                    return yaml.safe_load(f)
                    
            logger.success(f"‚úÖ Konfigurasi dimuat dari {config_file}")
            break
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Tidak dapat memuat {config_file}: {str(e)}")
    
    # Jika semua metode gagal, gunakan default minimal
    logger.warning("‚ö†Ô∏è Menggunakan konfigurasi default minimal")
    return {
        'model': {
            'backbone': 'efficientnet',
            'num_classes': 17,
            'img_size': [640, 640],
            'batch_size': 16,
            'workers': 4
        },
        'training': {
            'epochs': 30,
            'learning_rate': 0.001,
            'optimizer': 'adam',
            'batch_size': 16,
            'early_stopping_patience': 5
        },
        'layers': ['banknote', 'nominal', 'security'],
        'output_dir': 'runs/train'
    }

# Memuat konfigurasi
config = get_config()

def init_components():
    """Inisialisasi komponen training dengan status yang informatif."""
    with memory_manager():
        components = {}
        try:
            # 1. Inisialisasi Data Manager
            logger.start("üîÑ Memuat dataset dan dataloader...")
            data_manager = DataManager(
                config_path='configs/base_config.yaml',
                data_dir=config.get('data_dir', 'data'),
                logger=logger
            )
            
            # Dapatkan informasi dataset untuk validasi
            dataset_stats = data_manager.get_dataset_stats('train')
            if dataset_stats['image_count'] == 0:
                logger.warning("‚ö†Ô∏è Dataset kosong! Pastikan data telah dipreparasi")
            else:
                logger.info(f"üìä Dataset: {dataset_stats['image_count']} gambar, {dataset_stats['label_count']} label")
                
                # Tampilkan statistik layer
                for layer, count in dataset_stats.get('layer_stats', {}).items():
                    if count > 0:
                        logger.info(f"üìä Layer '{layer}': {count} anotasi")
            
            # 2. Siapkan DataLoader
            dataloaders = {
                'train': data_manager.get_train_loader(
                    batch_size=config.get('training', {}).get('batch_size', 16),
                    num_workers=config.get('model', {}).get('workers', 4)
                ),
                'val': data_manager.get_val_loader(
                    batch_size=config.get('training', {}).get('batch_size', 16),
                    num_workers=config.get('model', {}).get('workers', 4)
                ),
                'test': data_manager.get_test_loader(
                    batch_size=config.get('training', {}).get('batch_size', 16),
                    num_workers=config.get('model', {}).get('workers', 4)
                )
            }
            
            components['data_manager'] = data_manager
            components['dataloaders'] = dataloaders
            logger.success(f"‚úÖ Dataloader siap: {len(dataloaders['train'])} batch training")
            
            # 3. Inisialisasi Model Handler
            logger.start("ü§ñ Mempersiapkan model...")
            model_handler = ModelHandler(
                config=config,
                config_path='configs/base_config.yaml',
                num_classes=config.get('model', {}).get('num_classes', 17),
                logger=logger
            )
            components['model_handler'] = model_handler
            
            # 4. Inisialisasi Checkpoint Handler
            logger.start("üíæ Mempersiapkan checkpoint handler...")
            checkpoint_handler = CheckpointHandler(
                output_dir=config.get('output_dir', 'runs/train') + '/weights',
                logger=logger
            )
            components['checkpoint_handler'] = checkpoint_handler
            
            # Cek checkpoint yang tersedia
            checkpoints = checkpoint_handler.list_checkpoints()
            if any(checkpoints.values()):
                for category, ckpts in checkpoints.items():
                    if ckpts:
                        logger.info(f"üì¶ {category.capitalize()} checkpoint tersedia: {len(ckpts)}")
            else:
                logger.info("‚ÑπÔ∏è Belum ada checkpoint tersedia")
                
            # 5. Inisialisasi Experiment Tracker
            experiment_name = f"{config['model']['backbone']}_{datetime.now().strftime('%Y%m%d_%H%M')}"
            tracker = ExperimentTracker(
                experiment_name=experiment_name,
                output_dir=config.get('output_dir', 'runs/train') + '/experiments',
                logger=logger
            )
            components['experiment_tracker'] = tracker
            
            # 6. Inisialisasi Training Pipeline
            logger.start("üöÄ Mempersiapkan pipeline training...")
            pipeline = TrainingPipeline(
                config=config,
                model_handler=model_handler,
                data_manager=data_manager,
                logger=logger
            )
            components['pipeline'] = pipeline
            
            # Simpan komponen untuk penggunaan pada cell selanjutnya
            with open('training_components.pkl', 'wb') as f:
                pickle.dump(components, f)
            
            # Simpan config yang digunakan
            with open('config.pkl', 'wb') as f:
                pickle.dump(config, f)
                
            logger.success("‚ú® Pipeline training berhasil diinisialisasi!")
            
            return components
            
        except Exception as e:
            logger.error(f"‚ùå Gagal menginisialisasi pipeline: {str(e)}")
            import traceback
            traceback.print_exc()
            return components

# ===== 2. TRAINING STATUS UI =====
def create_training_status_ui():
    """Buat UI untuk menampilkan status training."""
    # Create output untuk status training
    status_output = widgets.Output()
    
    # Create progress bar dengan gaya yang lebih baik
    progress_bar = widgets.IntProgress(
        value=0,
        min=0,
        max=100,
        step=1,
        description='Progress:',
        bar_style='info',
        orientation='horizontal'
    )
    
    # Tambahkan info text dengan format HTML yang lebih baik
    info_text = widgets.HTML(
        value="""
        <div style="padding: 10px; border-radius: 5px; background-color: #f5f5f5; margin-bottom: 10px">
            <p><b>Status:</b> <span style="color: gray">Idle</span></p>
            <p><b>Epoch:</b> 0/?</p>
            <p><b>Best Val Loss:</b> -</p>
            <p><b>Device:</b> {}</p>
        </div>
        """.format("GPU" if torch.cuda.is_available() else "CPU")
    )
    
    # Button untuk cek status dengan ikon
    check_status_button = widgets.Button(
        description='Refresh Status',
        button_style='info',
        icon='sync',
        tooltip='Periksa status training terbaru'
    )
    
    def update_status():
        """Update display status training."""
        with status_output:
            clear_output()
            
            try:
                # Memuat komponen
                with open('training_components.pkl', 'rb') as f:
                    components = pickle.load(f)
                
                pipeline = components.get('pipeline')
                
                if pipeline:
                    status = pipeline.get_training_status()
                    
                    if status['status'] == 'training':
                        # Update progress bar
                        progress_bar.value = status.get('progress', 0)
                        
                        # Update info text dengan styling
                        info_text.value = f"""
                        <div style="padding: 10px; border-radius: 5px; background-color: #f0f7ff; margin-bottom: 10px">
                            <p><b>Status:</b> <span style="color: #3498db">Training</span></p>
                            <p><b>Epoch:</b> {status.get('current_epoch', 0)+1}/{status.get('total_epochs', '?')}</p>
                            <p><b>Best Val Loss:</b> <span style="color: #2ecc71; font-weight: bold">{status.get('best_val_loss', '-'):.4f}</span></p>
                            <p><b>Estimasi Waktu:</b> {status.get('estimated_time_remaining', 'Menghitung...')}</p>
                            <p><b>Device:</b> {("GPU" + (" - " + str(torch.cuda.get_device_name(0)) if torch.cuda.is_available() else "")) if torch.cuda.is_available() else "CPU"}</p>
                        </div>
                        """
                    else:
                        # Reset progress bar
                        progress_bar.value = 0
                        
                        # Update info text
                        info_text.value = f"""
                        <div style="padding: 10px; border-radius: 5px; background-color: #f5f5f5; margin-bottom: 10px">
                            <p><b>Status:</b> <span style="color: gray">Idle</span></p>
                            <p><b>Pesan:</b> {status.get('message', 'Tidak ada informasi')}</p>
                            <p><b>Device:</b> {("GPU" + (" - " + str(torch.cuda.get_device_name(0)) if torch.cuda.is_available() else "")) if torch.cuda.is_available() else "CPU"}</p>
                        </div>
                        """
                else:
                    logger.warning("‚ö†Ô∏è Pipeline belum diinisialisasi")
                    info_text.value = """
                    <div style="padding: 10px; border-radius: 5px; background-color: #fff4e5; margin-bottom: 10px">
                        <p><b>Status:</b> <span style="color: #e67e22">Tidak Tersedia</span></p>
                        <p><b>Pesan:</b> Pipeline belum diinisialisasi</p>
                    </div>
                    """
                    
                # Tampilkan hardware info jika dalam training
                if torch.cuda.is_available():
                    gpu_memory_allocated = torch.cuda.memory_allocated() / (1024**3)
                    gpu_memory_reserved = torch.cuda.memory_reserved() / (1024**3)
                    
                    print(f"üíª Info Hardware:")
                    print(f"  ‚Ä¢ GPU: {torch.cuda.get_device_name(0)}")
                    print(f"  ‚Ä¢ VRAM: {gpu_memory_allocated:.2f}GB (terpakai) / {gpu_memory_reserved:.2f}GB (total)")
                    print(f"  ‚Ä¢ CUDA Version: {torch.version.cuda}")
                else:
                    print(f"üíª Info Hardware: CPU Only")
                
                # Tampilkan apakah ada checkpoint yang tersedia
                try:
                    checkpoints = components.get('checkpoint_handler').list_checkpoints()
                    if any(checkpoints.values()):
                        print("\nüì¶ Checkpoint tersedia:")
                        for category, ckpts in checkpoints.items():
                            if ckpts:
                                print(f"  ‚Ä¢ {category.capitalize()}: {len(ckpts)} file")
                except Exception as e:
                    print(f"‚ö†Ô∏è Tidak dapat mengakses checkpoint: {str(e)}")
            except Exception as e:
                logger.error(f"‚ùå Error saat update status: {str(e)}")
                info_text.value = f"""
                <div style="padding: 10px; border-radius: 5px; background-color: #ffe5e5; margin-bottom: 10px">
                    <p><b>Status:</b> <span style="color: #e74c3c">Error</span></p>
                    <p><b>Pesan:</b> {str(e)}</p>
                </div>
                """
                print(f"Error saat update status: {str(e)}")
    
    def on_check_status_button_clicked(b):
        update_status()
    
    check_status_button.on_click(on_check_status_button_clicked)
    
    # Gabungkan elemen UI
    status_ui = widgets.VBox([
        widgets.HTML('<h3 style="margin-bottom: 10px;">üîÑ Status Training</h3>'),
        progress_bar,
        info_text,
        check_status_button,
        status_output
    ])
    
    return status_ui

# Inisialisasi pipeline
components = init_components()

# Tampilkan UI status training
status_ui = create_training_status_ui()
display(status_ui)