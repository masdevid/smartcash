# Cell 12 - Cek Instalasi (refactored)

# ===== 1. IMPORT MODULES =====
import os
import sys
import logging
import pickle
from pathlib import Path
from datetime import datetime
from typing import Tuple, Dict, List, Optional, Any

# ===== 2. CEK ENVIRONMENT COLAB =====
def setup_colab_environment() -> Tuple[bool, str]:
    """Setup Google Colab environment if running in Colab"""
    try:
        from google.colab import drive
        IN_COLAB = True
        print("✅ Berjalan di Google Colab")
        
        # Mount Google Drive
        if not Path('/content/drive/MyDrive').exists():
            print("🔄 Mencoba mount Google Drive...")
            drive.mount('/content/drive')
        print("✅ Google Drive berhasil di-mount!")
        
        return True, '/content/drive/MyDrive/SmartCash'
    except ImportError:
        print("ℹ️ Tidak berjalan di Google Colab")
        return False, os.getcwd()

# ===== 3. SETUP LOGGING =====
def setup_logging(IN_COLAB=False):
    """Setup logging configuration"""
    # Buat direktori logs jika belum ada
    os.makedirs("logs", exist_ok=True)
    
    # Setup basic logging configuration
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f"logs/smartcash_{datetime.now().strftime('%Y-%m-%d')}.log"),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    try:
        from smartcash.utils.logger import get_logger, SmartCashLogger
        logger = get_logger("notebook", log_to_console=True, log_to_file=True, log_to_colab=IN_COLAB)
    except Exception as e:
        print(f"⚠️ Gagal mengimpor SmartCashLogger: {str(e)}")
        print("⚠️ Menggunakan logger standard...")
        
        # Import SimpleLogger fallback
        try:
            from smartcash.utils.simple_logger import SimpleLogger
            logger = SimpleLogger("notebook")
        except Exception as simple_logger_error:
            print(f"⚠️ Gagal mengimpor SimpleLogger: {str(simple_logger_error)}")
            # Fallback ke logging standar
            logger = logging.getLogger("notebook")
            
    return logger

# ===== 4. SETUP DIRECTORIES =====
def setup_directories(base_dir: str) -> str:
    """Setup necessary directories for the project"""
    dirs = [
        "data/train/images",
        "data/train/labels",
        "data/valid/images",
        "data/valid/labels",
        "data/test/images",
        "data/test/labels",
        "configs",
        "runs/train/weights",
        "logs"
    ]
    
    for d in dirs:
        os.makedirs(f"{base_dir}/{d}", exist_ok=True)
    
    return base_dir

# ===== 5. INITIALIZE GLOBAL VARIABLES =====
# Setup Colab environment
IN_COLAB, BASE_DIR = setup_colab_environment()

# Setup directories
BASE_DIR = setup_directories(BASE_DIR)

# Setup logging
logger = setup_logging(IN_COLAB)

# Setup device
DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# ===== 6. DISPLAY ENVIRONMENT INFO =====
print("\n🔍 Informasi Lingkungan:")
print(f"📊 PyTorch: {torch.__version__}")
print(f"🖥️ CUDA tersedia: {torch.cuda.is_available()}")
if torch.cuda.is_available():
    print(f"🚀 CUDA Device: {torch.cuda.get_device_name(0)}")
    print(f"🧠 CUDA Memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.2f} GB")
else:
    print("⚠️ CUDA tidak tersedia, menggunakan CPU")

print(f"\n📂 Base Directory: {BASE_DIR}")

# Save base directory for other cells
with open('base_dir.pkl', 'wb') as f:
    pickle.dump(BASE_DIR, f)

logger.info("✨ Setup global berhasil dilakukan")