# Cell 11: Skenario Penelitian

class ResearchScenarioRunner:
    """Runner untuk menjalankan skenario penelitian"""
    
    def __init__(self, config):
        self.config = config
        self.logger = SmartCashLogger("research_scenario")
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        
        # Setup managers
        self.model_manager = ModelHandler(config)
        self.data_manager = DataManager(config)
        self.evaluator = ModelEvaluator(config)
        
        # Setup direktori output untuk hasil penelitian
        self.output_dir = Path(config.get('output_dir', 'runs/train'))
        self.results_dir = self.output_dir / 'research_results'
        self.results_dir.mkdir(parents=True, exist_ok=True)
        
        # Definisikan skenario penelitian
        self.scenarios = self._define_scenarios()
        
    def _define_scenarios(self):
        """Definisikan skenario penelitian"""
        return {
            'Skenario-1': {
                'description': 'YOLOv5 Default (CSPDarknet) - Posisi Bervariasi',
                'backbone': 'cspdarknet',
                'conditions': 'position'
            },
            'Skenario-2': {
                'description': 'YOLOv5 Default (CSPDarknet) - Pencahayaan Bervariasi',
                'backbone': 'cspdarknet',
                'conditions': 'lighting'
            },
            'Skenario-3': {
                'description': 'YOLOv5 EfficientNet-B4 - Posisi Bervariasi',
                'backbone': 'efficientnet',
                'conditions': 'position'
            },
            'Skenario-4': {
                'description': 'YOLOv5 EfficientNet-B4 - Pencahayaan Bervariasi',
                'backbone': 'efficientnet',
                'conditions': 'lighting'
            }
        }
    
    def run_scenario(self, scenario_name, use_existing_model=True):
        """Jalankan skenario penelitian tertentu"""
        if scenario_name not in self.scenarios:
            self.logger.error(f"‚ùå Skenario {scenario_name} tidak dikenali")
            return None
        
        scenario = self.scenarios[scenario_name]
        self.logger.info(f"üöÄ Menjalankan {scenario_name}: {scenario['description']}")
        
        # Set backbone ke skenario
        backbone_type = scenario['backbone']
        
        # Load model terbaik jika ada dan diminta
        if use_existing_model:
            model = self.evaluator.load_best_model(self.model_manager, backbone_type)
        else:
            # Buat model baru
            model = self.model_manager.create_model(backbone_type)
            
        # Evaluasi model pada test set
        test_loader = self.data_manager.get_dataloaders()['test']
        
        self.logger.info(f"üìä Mengevaluasi {scenario_name} dengan backbone {backbone_type}")
        
        # Run evaluasi 3 kali untuk mendapatkan nilai yang stabil
        metrics_list = []
        for run in range(3):
            self.logger.info(f"üîÑ Run {run+1}/3")
            metrics = self.evaluator.evaluate(model, test_loader)
            metrics_list.append(metrics)
        
        # Rata-rata metrik
        avg_metrics = {
            'accuracy': np.mean([m.get('accuracy', 0) for m in metrics_list]),
            'precision': np.mean([m.get('precision', 0) for m in metrics_list]),
            'recall': np.mean([m.get('recall', 0) for m in metrics_list]),
            'f1': np.mean([m.get('f1', 0) for m in metrics_list]),
            'mAP': np.mean([m.get('mAP', 0) for m in metrics_list]),
            'inference_time': np.mean([m.get('inference_time', 0) for m in metrics_list])
        }
        
        # Log hasil
        self.logger.success(
            f"‚úÖ Hasil rata-rata untuk {scenario_name}:\n"
            f"   Accuracy: {avg_metrics['accuracy']:.4f}\n"
            f"   Precision: {avg_metrics['precision']:.4f}\n"
            f"   Recall: {avg_metrics['recall']:.4f}\n"
            f"   F1-Score: {avg_metrics['f1']:.4f}\n"
            f"   mAP: {avg_metrics['mAP']:.4f}\n"
            f"   Inference Time: {avg_metrics['inference_time']*1000:.2f}ms"
        )
        
        # Tambahkan informasi skenario ke metrik
        avg_metrics['scenario'] = scenario_name
        avg_metrics['description'] = scenario['description']
        avg_metrics['backbone'] = backbone_type
        avg_metrics['conditions'] = scenario['conditions']
        
        return avg_metrics
    
    def run_all_scenarios(self, use_existing_models=True):
        """Jalankan semua skenario penelitian"""
        self.logger.info("üî¨ Menjalankan semua skenario penelitian")
        
        results = []
        
        for scenario_name in self.scenarios:
            metrics = self.run_scenario(scenario_name, use_existing_models)
            if metrics:
                results.append(metrics)
        
        # Buat DataFrame
        import pandas as pd
        results_df = pd.DataFrame(results)
        
        # Simpan hasil
        csv_path = self.results_dir / 'research_results.csv'
        results_df.to_csv(csv_path, index=False)
        
        self.logger.success(f"‚úÖ Hasil penelitian disimpan di {csv_path}")
        
        # Plot perbandingan hasil
        self.plot_comparison(results_df)
        
        return results_df
    
    def plot_comparison(self, results_df):
        """Plot perbandingan hasil antar skenario"""
        # Plot metrik per backbone
        metrics_to_plot = ['accuracy', 'precision', 'recall', 'f1', 'mAP']
        
        plt.figure(figsize=(14, 8))
        
        # Kelompokkan berdasarkan backbone
        efficientnet_df = results_df[results_df['backbone'] == 'efficientnet']
        cspdarknet_df = results_df[results_df['backbone'] == 'cspdarknet']
        
        # Siapkan X tick positions
        x = np.arange(len(metrics_to_plot))
        width = 0.35
        
        # Plot bars
        rects1 = plt.bar(
            x - width/2, 
            [efficientnet_df[m].mean() for m in metrics_to_plot],
            width,
            label='EfficientNet-B4',
            color='#1f77b4'
        )
        
        rects2 = plt.bar(
            x + width/2, 
            [cspdarknet_df[m].mean() for m in metrics_to_plot],
            width,
            label='CSPDarknet',
            color='#ff7f0e'
        )
        
        # Tambahkan label
        plt.xlabel('Metrik')
        plt.ylabel('Nilai')
        plt.title('Perbandingan Metrik Antar Backbone')
        plt.xticks(x, metrics_to_plot)
        plt.ylim(0, 1.1)
        plt.legend()
        plt.grid(True, axis='y', linestyle='--', alpha=0.7)
        
        # Add values on top of bars
        def autolabel(rects):
            for rect in rects:
                height = rect.get_height()
                plt.annotate(f'{height:.3f}',
                            xy=(rect.get_x() + rect.get_width()/2, height),
                            xytext=(0, 3),
                            textcoords="offset points",
                            ha='center', va='bottom',
                            fontweight='bold')
        
        autolabel(rects1)
        autolabel(rects2)
        
        # Simpan plot
        plt.tight_layout()
        plot_path = self.results_dir / 'backbone_comparison.png'
        plt.savefig(plot_path)
        plt.close()
        
        # Plot inference time
        plt.figure(figsize=(10, 6))
        
        # Bar colors by backbone
        colors = ['#1f77b4' if b == 'efficientnet' else '#ff7f0e' for b in results_df['backbone']]
        
        # Create bars
        bars = plt.bar(
            results_df['scenario'],
            results_df['inference_time'] * 1000,  # Convert to ms
            color=colors
        )
        
        # Add values on top of bars
        for bar in bars:
            height = bar.get_height()
            plt.text(
                bar.get_x() + bar.get_width()/2.,
                height,
                f'{height:.2f}ms',
                ha='center',
                va='bottom',
                fontweight='bold'
            )
        
        plt.title('Perbandingan Waktu Inferensi Antar Skenario')
        plt.ylabel('Waktu Inferensi (ms)')
        plt.xticks(rotation=45)
        plt.grid(True, axis='y', linestyle='--', alpha=0.7)
        plt.tight_layout()
        
        # Simpan plot
        inference_plot_path = self.results_dir / 'inference_time_comparison.png'
        plt.savefig(inference_plot_path)
        plt.close()
        
        self.logger.info(f"üìä Perbandingan backbone disimpan di {plot_path}")
        self.logger.info(f"üìä Perbandingan waktu inferensi disimpan di {inference_plot_path}")