"""
File: smartcash/ui/model/training/components/phase_aware_training_ui.py
Description: Phase-aware training UI with two-column metrics layout and enhanced callbacks.
"""

from typing import Dict, Any, Optional
import ipywidgets as widgets
from smartcash.ui.logger import get_module_logger

# Standard container imports
from smartcash.ui.components import (
    create_header_container, 
    create_form_container, 
    create_action_container,
    create_operation_container, 
    create_summary_container, 
    create_main_container
)
from smartcash.ui.components.form_container import LayoutType
from smartcash.ui.core.decorators import handle_ui_errors
from .unified_training_form import create_unified_training_form
from .training_charts import create_dual_charts_layout
from .phase_aware_metrics import (
    generate_phase_aware_metrics_html,
    get_initial_phase_aware_metrics_html,
    create_live_metrics_update
)
from .enhanced_callbacks import create_enhanced_training_callbacks


def create_phase_aware_charts_and_metrics(config: Dict[str, Any]) -> widgets.Widget:
    """Create phase-aware charts and metrics section with two-column layout.
    
    Args:
        config: Configuration for charts and metrics
        
    Returns:
        Accordion widget containing phase-aware charts and metrics
    """
    logger = get_module_logger("smartcash.ui.model.training.components")
    
    try:\n        # Get training mode from config\n        training_mode = config.get('training', {}).get('training_mode', 'two_phase')\n        \n        # Create chart configuration\n        chart_config = config.get('charts', {\n            'charts': {\n                'loss_chart': {'update_frequency': 'epoch'},\n                'metrics_chart': {'update_frequency': 'epoch'}  # Renamed from map_chart\n            },\n            'monitoring': {'primary_metric': 'phase_metrics'}\n        })\n        \n        # Create dual charts with phase awareness\n        charts = create_dual_charts_layout(chart_config, config.get('ui', {}))\n        \n        # Create phase-aware charts container\n        charts_container = widgets.VBox([\n            widgets.HTML(\n                value=\"<h4 style='text-align: center; color: #495057; margin: 10px 0;'>üìà Phase-Aware Training Charts</h4>\"\n            ),\n            widgets.HBox([\n                charts['loss_chart'],\n                charts.get('metrics_chart', charts.get('map_chart'))  # Fallback compatibility\n            ], layout=widgets.Layout(width='100%'))\n        ], layout=widgets.Layout(width='100%', padding='10px'))\n        \n        # Create phase-aware metrics display\n        metrics_display = widgets.HTML(\n            value=get_initial_phase_aware_metrics_html(training_mode),\n            layout=widgets.Layout(width='100%', padding='10px')\n        )\n        \n        # Create live progress display\n        progress_display = widgets.VBox([\n            widgets.HTML(\n                value=\"<h5 style='color: #495057; margin-bottom: 10px;'>üîÑ Training Progress</h5>\"\n            ),\n            widgets.HTML(\n                value=\"<div style='background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; color: #6c757d;'>Training progress will appear here</div>\",\n                layout=widgets.Layout(width='100%')\n            )\n        ], layout=widgets.Layout(width='100%', padding='10px'))\n        \n        # Create log output display\n        log_display = widgets.Textarea(\n            value=\"Training logs will appear here...\\n\",\n            placeholder=\"Training logs...\",\n            layout=widgets.Layout(width='100%', height='200px'),\n            disabled=True\n        )\n        \n        # Create accordion for all sections\n        accordion = widgets.Accordion(children=[\n            charts_container,\n            metrics_display,\n            progress_display,\n            log_display\n        ])\n        \n        accordion.set_title(0, \"üìà Live Training Charts\")\n        accordion.set_title(1, \"üìä Phase-Aware Metrics\")\n        accordion.set_title(2, \"üîÑ Training Progress\")\n        accordion.set_title(3, \"üìù Training Logs\")\n        accordion.selected_index = 1  # Start with metrics visible\n        \n        # Store references for updates\n        accordion._charts = charts\n        accordion._metrics_display = metrics_display\n        accordion._progress_display = progress_display.children[1]\n        accordion._log_display = log_display\n        accordion._training_mode = training_mode\n        accordion._current_phase = 1\n        accordion._current_epoch = 0\n        \n        # Enhanced update methods\n        def update_phase_aware_metrics(update_data: Dict[str, Any]):\n            \"\"\"Update phase-aware metrics display.\"\"\"\n            try:\n                accordion._current_phase = update_data.get('phase', 1)\n                accordion._current_epoch = update_data.get('epoch', 0)\n                \n                # Update metrics HTML\n                metrics_display.value = update_data.get('html', metrics_display.value)\n                \n                logger.debug(f\"Updated phase-aware metrics: Phase {accordion._current_phase}, Epoch {accordion._current_epoch}\")\n            except Exception as e:\n                logger.warning(f\"Failed to update phase-aware metrics: {e}\")\n        \n        def update_charts_data(data: Dict[str, Any]):\n            \"\"\"Update charts with phase-aware training data.\"\"\"\n            try:\n                # Update loss chart\n                charts['update_loss'](data)\n                \n                # Update metrics chart with phase-aware data\n                if 'update_metrics' in charts:\n                    charts['update_metrics'](data)\n                elif 'update_map' in charts:  # Fallback compatibility\n                    charts['update_map'](data)\n                    \n                logger.debug(f\"Updated charts with data: {list(data.keys())}\")\n            except Exception as e:\n                logger.warning(f\"Failed to update charts: {e}\")\n        \n        def update_progress_display(progress_data: Dict[str, Any]):\n            \"\"\"Update progress display.\"\"\"\n            try:\n                progress_type = progress_data.get('type', 'unknown')\n                current = progress_data.get('current', 0)\n                total = progress_data.get('total', 1)\n                message = progress_data.get('message', '')\n                percentage = progress_data.get('percentage', 0)\n                \n                # Create progress HTML\n                progress_html = f\"\"\"\n                <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;\">\n                        <span style=\"font-weight: 600; color: #495057;\">{progress_type.replace('_', ' ').title()}</span>\n                        <span style=\"font-weight: 600; color: #007bff;\">{percentage:.1f}%</span>\n                    </div>\n                    <div style=\"background: #e9ecef; border-radius: 10px; height: 8px; margin-bottom: 8px;\">\n                        <div style=\"background: #007bff; border-radius: 10px; height: 8px; width: {percentage}%; transition: width 0.3s ease;\"></div>\n                    </div>\n                    <div style=\"font-size: 12px; color: #6c757d; text-align: center;\">{message}</div>\n                    <div style=\"font-size: 11px; color: #6c757d; text-align: center; margin-top: 4px;\">({current}/{total})</div>\n                </div>\n                \"\"\"\n                \n                accordion._progress_display.value = progress_html\n                \n            except Exception as e:\n                logger.warning(f\"Failed to update progress display: {e}\")\n        \n        def update_log_output(log_message: str):\n            \"\"\"Update log output display.\"\"\"\n            try:\n                current_logs = accordion._log_display.value\n                accordion._log_display.value = current_logs + log_message + \"\\n\"\n                \n                # Auto-scroll to bottom (simulate)\n                lines = accordion._log_display.value.split('\\n')\n                if len(lines) > 100:  # Keep last 100 lines\n                    accordion._log_display.value = '\\n'.join(lines[-100:])\n                    \n            except Exception as e:\n                logger.warning(f\"Failed to update log output: {e}\")\n        \n        def reset_all_displays():\n            \"\"\"Reset all displays to initial state.\"\"\"\n            try:\n                # Reset charts\n                if 'reset_charts' in charts:\n                    charts['reset_charts']()\n                \n                # Reset metrics\n                metrics_display.value = get_initial_phase_aware_metrics_html(accordion._training_mode)\n                \n                # Reset progress\n                accordion._progress_display.value = \"<div style='background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; color: #6c757d;'>Training progress will appear here</div>\"\n                \n                # Reset logs\n                accordion._log_display.value = \"Training logs will appear here...\\n\"\n                \n                # Reset state\n                accordion._current_phase = 1\n                accordion._current_epoch = 0\n                \n                logger.info(\"Reset all displays to initial state\")\n                \n            except Exception as e:\n                logger.warning(f\"Failed to reset displays: {e}\")\n        \n        # Attach methods to accordion\n        accordion.update_phase_aware_metrics = update_phase_aware_metrics\n        accordion.update_charts_data = update_charts_data\n        accordion.update_progress_display = update_progress_display\n        accordion.update_log_output = update_log_output\n        accordion.reset_all_displays = reset_all_displays\n        \n        return accordion\n        \n    except Exception as e:\n        logger.error(f\"Failed to create phase-aware charts and metrics: {e}\")\n        # Return fallback widget\n        return widgets.HTML(\n            value=f\"<div style='background: #f8d7da; color: #721c24; padding: 15px; border-radius: 8px;'>‚ùå Failed to create phase-aware display: {e}</div>\"\n        )\n\n\n@handle_ui_errors(\"create_phase_aware_training_ui\")\ndef create_phase_aware_training_ui(config: Dict[str, Any]) -> widgets.Widget:\n    \"\"\"Create complete phase-aware training UI with enhanced callbacks.\n    \n    Args:\n        config: Configuration dictionary\n        \n    Returns:\n        Complete training UI widget\n    \"\"\"\n    logger = get_module_logger(\"smartcash.ui.model.training.components\")\n    \n    try:\n        # Create header\n        header = create_header_container(\n            title=\"üöÄ SmartCash Model Training\",\n            subtitle=\"Phase-aware training with real-time metrics and progress tracking\",\n            config=config.get('ui', {})\n        )\n        \n        # Create unified training form\n        form_components = create_unified_training_form(config)\n        form_container = create_form_container(\n            \"Training Configuration\",\n            form_components,\n            layout_type=LayoutType.VERTICAL,\n            config=config.get('ui', {})\n        )\n        \n        # Create action container (will be populated by operation handler)\n        action_container = create_action_container(\n            \"Training Actions\",\n            [],  # Will be populated by operation\n            config=config.get('ui', {})\n        )\n        \n        # Create phase-aware charts and metrics\n        charts_and_metrics = create_phase_aware_charts_and_metrics(config)\n        \n        # Create operation container for training execution\n        operation_container = create_operation_container(\n            \"Training Execution\",\n            config=config.get('ui', {})\n        )\n        \n        # Create summary container\n        summary_container = create_summary_container(\n            \"Training Summary\",\n            \"Training results and performance metrics will appear here\",\n            config=config.get('ui', {})\n        )\n        \n        # Create main container with all components\n        main_ui = create_main_container(\n            [\n                header,\n                form_container,\n                action_container,\n                charts_and_metrics,\n                operation_container,\n                summary_container\n            ],\n            config=config.get('ui', {})\n        )\n        \n        # Store references for external access\n        main_ui._header = header\n        main_ui._form_container = form_container\n        main_ui._action_container = action_container\n        main_ui._charts_and_metrics = charts_and_metrics\n        main_ui._operation_container = operation_container\n        main_ui._summary_container = summary_container\n        \n        # Enhanced callback integration methods\n        def setup_enhanced_callbacks():\n            \"\"\"Setup enhanced callbacks for training integration.\"\"\"\n            try:\n                # Create enhanced callbacks with UI integration\n                callbacks = create_enhanced_training_callbacks(\n                    ui_module=main_ui,\n                    verbose=config.get('training', {}).get('verbose', True)\n                )\n                \n                # Store callbacks for use by operations\n                main_ui._enhanced_callbacks = callbacks\n                \n                logger.info(\"Enhanced callbacks setup completed\")\n                return callbacks\n                \n            except Exception as e:\n                logger.error(f\"Failed to setup enhanced callbacks: {e}\")\n                return None\n        \n        def _update_metrics_display(update_data: Dict[str, Any]):\n            \"\"\"Update metrics display with phase-aware data.\"\"\"\n            try:\n                charts_and_metrics.update_phase_aware_metrics(update_data)\n            except Exception as e:\n                logger.warning(f\"Failed to update metrics display: {e}\")\n        \n        def _update_progress_display(progress_data: Dict[str, Any]):\n            \"\"\"Update progress display.\"\"\"\n            try:\n                charts_and_metrics.update_progress_display(progress_data)\n            except Exception as e:\n                logger.warning(f\"Failed to update progress display: {e}\")\n        \n        def _update_log_output(log_message: str):\n            \"\"\"Update log output.\"\"\"\n            try:\n                charts_and_metrics.update_log_output(log_message)\n            except Exception as e:\n                logger.warning(f\"Failed to update log output: {e}\")\n        \n        def _update_live_charts(chart_data: Dict[str, Any]):\n            \"\"\"Update live charts.\"\"\"\n            try:\n                charts_and_metrics.update_charts_data(chart_data)\n            except Exception as e:\n                logger.warning(f\"Failed to update live charts: {e}\")\n        \n        def _handle_colored_metrics(phase: str, epoch: int, metrics: Dict[str, Any], colored_metrics: Dict[str, Dict]):\n            \"\"\"Handle colored metrics from UI callback.\"\"\"\n            try:\n                # This could be used for additional UI enhancements\n                logger.debug(f\"Received colored metrics for {phase} epoch {epoch}\")\n            except Exception as e:\n                logger.warning(f\"Failed to handle colored metrics: {e}\")\n        \n        # Attach methods to main UI\n        main_ui.setup_enhanced_callbacks = setup_enhanced_callbacks\n        main_ui._update_metrics_display = _update_metrics_display\n        main_ui._update_progress_display = _update_progress_display\n        main_ui._update_log_output = _update_log_output\n        main_ui._update_live_charts = _update_live_charts\n        main_ui._handle_colored_metrics = _handle_colored_metrics\n        \n        logger.info(\"Phase-aware training UI created successfully\")\n        return main_ui\n        \n    except Exception as e:\n        logger.error(f\"Failed to create phase-aware training UI: {e}\")\n        raise\n\n\n# Backward compatibility\ndef create_unified_training_ui(config: Dict[str, Any]) -> widgets.Widget:\n    \"\"\"Backward compatibility wrapper.\"\"\"\n    return create_phase_aware_training_ui(config)