# Cell 8.6: Model Exporter - Untuk mengekspor model dalam format yang dapat digunakan di produksi

from smartcash.utils.model_exporter import ModelExporter
import torch
import ipywidgets as widgets
from IPython.display import display, clear_output
import os
from datetime import datetime

# Memastikan model_manager dan logger tersedia
# Gunakan model_manager yang sudah diinisialisasi sebelumnya
if 'model_manager' not in globals():
    # Jika belum ada, coba gunakan model_handler dari cell sebelumnya jika tersedia
    if 'model_handler' in globals():
        model_manager = model_handler
    else:
        # Jika tidak tersedia, buat instance baru
        from smartcash.handlers.model_handler import ModelHandler

        model_manager = ModelHandler(
            config=config, 
            config_path='configs/base_config.yaml',
            num_classes=config.get('model', {}).get('num_classes', 7)
        )

# Pastikan logger tersedia
if 'logger' not in globals():
    from smartcash.utils.logger import get_logger
    logger = get_logger("model_exporter", log_to_console=True, log_to_file=True, log_to_colab=True)

# Inisialisasi CheckpointHandler
from smartcash.handlers.checkpoint_handler import CheckpointHandler
checkpoint_handler = CheckpointHandler(logger=logger)

# Inisialisasi model exporter menggunakan kelas dari modul utils
model_exporter = ModelExporter(model_manager, checkpoint_handler, logger)

# UI untuk ekspor model
export_format_selector = widgets.Dropdown(
    options=[
        ('TorchScript (PyTorch)', 'torchscript'),
        ('ONNX (Open Format)', 'onnx')
    ],
    value='torchscript',
    description='Format Ekspor:',
    style={'description_width': 'initial'}
)

# Opsi optimasi
optimize_checkbox = widgets.Checkbox(
    value=True,
    description='Optimalkan untuk Inferensi',
    style={'description_width': 'initial'}
)

# Opsi ONNX
onnx_opset_selector = widgets.IntSlider(
    value=12,
    min=10,
    max=14,
    step=1,
    description='ONNX Opset Version:',
    disabled=True,
    style={'description_width': 'initial'}
)

# Opsi salin ke Drive
copy_to_drive_checkbox = widgets.Checkbox(
    value=True,
    description='Salin ke Google Drive',
    style={'description_width': 'initial'},
    disabled=not os.path.exists("/content/drive")
)

export_button = widgets.Button(
    description='Ekspor Model',
    button_style='primary',
    icon='download'
)

export_output = widgets.Output()

# Function untuk update UI berdasarkan format yang dipilih
def on_format_change(change):
    if change['new'] == 'onnx':
        onnx_opset_selector.disabled = False
        optimize_checkbox.disabled = True
    else:
        onnx_opset_selector.disabled = True
        optimize_checkbox.disabled = False

export_format_selector.observe(on_format_change, names='value')

def on_export_button_clicked(b):
    """Handler untuk tombol ekspor"""
    # Update tombol
    export_button.description = "Memproses..."
    export_button.disabled = True
    
    with export_output:
        clear_output()
        
        try:
            # Jalankan ekspor berdasarkan format yang dipilih
            if export_format_selector.value == 'torchscript':
                export_path = model_exporter.export_to_torchscript(
                    optimize=optimize_checkbox.value
                )
            elif export_format_selector.value == 'onnx':
                export_path = model_exporter.export_to_onnx(
                    opset_version=onnx_opset_selector.value
                )
            else:
                print(f"‚ùå Format ekspor tidak valid: {export_format_selector.value}")
                return
            
            # Cek hasil ekspor
            if export_path:
                export_file = Path(export_path)
                file_size = export_file.stat().st_size / (1024 * 1024)  # size in MB
                
                print(f"\n‚úÖ Model berhasil diekspor:")
                print(f"üìÅ Path: {export_path}")
                print(f"üìä Ukuran: {file_size:.2f} MB")
                print(f"üîÑ Format: {export_format_selector.value}")
                print(f"üïí Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                # Salin ke Drive jika diminta
                if copy_to_drive_checkbox.value and os.path.exists("/content/drive"):
                    drive_path = model_exporter.copy_to_drive(export_path)
                    if drive_path:
                        print(f"\n‚úÖ Model berhasil disalin ke Google Drive:")
                        print(f"üìÅ Path: {drive_path}")
            else:
                print("‚ùå Ekspor model gagal")
                
        except Exception as e:
            print(f"‚ùå Error saat mengekspor model: {str(e)}")
        
        finally:
            # Reset tombol
            export_button.description = "Ekspor Model"
            export_button.disabled = False

export_button.on_click(on_export_button_clicked)

# Tampilkan UI
display(widgets.VBox([
    widgets.HTML("<h2>üì¶ Ekspor Model</h2>"),
    widgets.HTML("<p>Ekspor model checkpoint terbaik ke format yang dapat digunakan di produksi.</p>"),
    export_format_selector,
    widgets.HBox([optimize_checkbox, onnx_opset_selector]),
    copy_to_drive_checkbox,
    export_button,
    export_output
]))