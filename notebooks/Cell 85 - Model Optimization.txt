# Cell 85: Memory Optimization (refactored)

import torch
import gc
import pickle
from pathlib import Path

# Import komponen UI dan handler
from smartcash.ui_components.model_components import create_model_optimization_ui
from smartcash.ui_handlers.model_handlers import setup_model_optimization_handlers

# Setup logger
from smartcash.utils.logger import get_logger
logger = get_logger("memory_optimizer", log_to_console=True, log_to_file=True, log_to_colab=True)

# Memuat config jika tersedia
try:
    with open('config.pkl', 'rb') as f:
        config = pickle.load(f)
except Exception as e:
    logger.warning(f"⚠️ Gagal memuat config: {str(e)}")
    # Gunakan config default
    config = {
        'model': {
            'backbone': 'efficientnet',
            'num_classes': 17,
            'img_size': [640, 640]
        },
        'layers': ['banknote']
    }

# Memuat model_handler dari cell sebelumnya jika tersedia, jika tidak, buat baru
if 'model_handler' not in globals():
    try:
        # Initialize model handler
        from smartcash.handlers.model_handler import ModelHandler
        model_handler = ModelHandler(config=config, logger=logger)
        logger.info("✅ Model handler berhasil dibuat")
    except Exception as e:
        logger.error(f"❌ Gagal membuat model handler: {str(e)}")
        raise

# Inisialisasi memory optimizer
try:
    from smartcash.utils.memory_optimizer import MemoryOptimizer
    memory_optimizer = MemoryOptimizer(logger=logger)
except Exception as e:
    logger.warning(f"⚠️ Error initializing MemoryOptimizer: {str(e)}")
    # Fallback to basic implementation
    # Define minimal class for compatibility
    class SimpleMemoryOptimizer:
        def __init__(self, logger):
            self.logger = logger
            
        def check_gpu_status(self):
            if torch.cuda.is_available():
                self.logger.info(f"GPU: {torch.cuda.get_device_name(0)}")
                self.logger.info(f"Memory Allocated: {torch.cuda.memory_allocated() / (1024**2):.2f} MB")
                self.logger.info(f"Memory Reserved: {torch.cuda.memory_reserved() / (1024**2):.2f} MB")
            else:
                self.logger.info("GPU not available")
        
        def get_optimization_stats(self):
            if torch.cuda.is_available():
                return {
                    'gpu_available': True,
                    'gpu_name': torch.cuda.get_device_name(0),
                    'used_memory': torch.cuda.memory_allocated() / (1024**2),
                    'free_memory': (torch.cuda.get_device_properties(0).total_memory / (1024**2)) - (torch.cuda.memory_allocated() / (1024**2)),
                    'total_memory': torch.cuda.get_device_properties(0).total_memory / (1024**2)
                }
            else:
                return {'gpu_available': False}
    
    memory_optimizer = SimpleMemoryOptimizer(logger)

# Inisialisasi enhanced cache
try:
    from smartcash.utils.enhanced_cache import EnhancedCache
    cache = EnhancedCache(
        cache_dir=".cache/smartcash",
        max_size_gb=1.0,
        logger=logger
    )
except Exception as e:
    logger.warning(f"⚠️ Error initializing EnhancedCache: {str(e)}")
    # Fallback to None
    cache = None

# Buat UI komponen untuk optimasi model
ui_components = create_model_optimization_ui()

# Setup handler untuk komponen UI
setup_model_optimization_handlers(ui_components, memory_optimizer, cache, logger)

# Tampilkan UI
display(ui_components['ui'])