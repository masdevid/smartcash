# Cell 8.2: Model Visualization - Untuk visualisasi model

import torch
import gc
import ipywidgets as widgets
from IPython.display import display, clear_output
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path
import pickle

# Import model visualizer dan utilities
try:
    from smartcash.utils.model_visualizer import ModelVisualizer
    from smartcash.utils.layer_config_manager import get_layer_config
    from smartcash.handlers.model_handler import ModelHandler
    from smartcash.utils.logger import get_logger
except ImportError as e:
    print(f"‚ö†Ô∏è Error importing modules: {str(e)}")
    raise

# Memuat model_handler dari cell sebelumnya jika tersedia, jika tidak, buat baru
if 'model_handler' not in globals():
    try:
        # Load config
        with open('config.pkl', 'rb') as f:
            config = pickle.load(f)
            
        # Setup logger
        logger = get_logger("model_visualizer", log_to_console=True)
        
        # Initialize model handler
        model_handler = ModelHandler(config=config, logger=logger)
        print("‚úÖ Model handler berhasil dibuat")
    except Exception as e:
        print(f"‚ùå Gagal membuat model handler: {str(e)}")
        raise

# Buat tombol untuk demonstrasi visualisasi model
create_model_button = widgets.Button(
    description='Buat Model & Visualisasikan',
    button_style='primary',
    icon='rocket'
)

visualization_output = widgets.Output()

def on_create_model_button_clicked(b):
    """Callback untuk membuat dan memvisualisasikan model"""
    with visualization_output:
        clear_output()
        
        try:
            # Update konfigurasi berdasarkan pilihan
            config['model']['backbone'] = backbone_select.value
            
            if mode_select.value == 'multi':
                config['layers'] = ['banknote', 'nominal', 'security']
            else:
                config['layers'] = ['banknote']
            
            # Gunakan ModelHandler untuk membuat model
            model = model_handler.create_model(backbone_type=backbone_select.value)
            
            # Initializes layer config if needed
            layer_config = get_layer_config()
            
            # Visualisasikan model
            visualizer = ModelVisualizer(
                model=model, 
                logger=logger, 
                output_dir=config.get('output_dir', 'runs/visualization')
            )
            
            # Tampilkan sesuai opsi visualisasi yang dipilih
            if viz_module_select.value == 'full' or viz_module_select.value == 'parameters':
                # Tampilkan informasi parameter
                visualizer.count_parameters()
                
                # Tampilkan diagram parameter per modul jika dipilih parameters
                if viz_module_select.value == 'parameters':
                    module_params = visualizer.get_module_parameters()
                    
                    # Plot diagram batang parameter per modul
                    plt.figure(figsize=(10, 6))
                    modules = list(module_params.keys())
                    values = [module_params[m] / 1e6 for m in modules]  # Convert to millions
                    
                    # Sort by parameter count
                    sorted_indices = np.argsort(values)[::-1]
                    modules = [modules[i] for i in sorted_indices]
                    values = [values[i] for i in sorted_indices]
                    
                    plt.barh(modules, values, color='#3498db')
                    plt.xlabel('Jumlah Parameter (juta)')
                    plt.title('Distribusi Parameter dalam Model')
                    plt.grid(True, linestyle='--', alpha=0.7)
                    plt.tight_layout()
                    plt.show()
            
            if viz_module_select.value == 'full' or viz_module_select.value == 'backbone':
                # Visualisasikan backbone
                visualizer.visualize_backbone()
                
                # Visualisasikan output layer jika tersedia
                if viz_module_select.value == 'full':
                    print("\nüîç Visualisasi Output Layer:")
                    visualizer.visualize_layer_outputs()
            
            # Coba tampilkan summary jika torchsummary tersedia
            if viz_module_select.value == 'full':
                try:
                    import torchsummary
                    print("\nüîç Detail struktur model:")
                    visualizer.print_model_summary()
                except ImportError:
                    print("\n‚ö†Ô∏è Untuk melihat detail struktur model, install torchsummary:")
                    print("!pip install torchsummary")
            
            # Bersihkan model
            del model
            torch.cuda.empty_cache()
            gc.collect()
            
        except Exception as e:
            print(f"‚ùå Gagal membuat atau memvisualisasikan model: {str(e)}")
            import traceback
            traceback.print_exc()

create_model_button.on_click(on_create_model_button_clicked)

# Tambahkan dropdown untuk memilih backbone dan mode
backbone_select = widgets.Dropdown(
    options=[
        ('EfficientNet-B4', 'efficientnet'),
        ('CSPDarknet', 'cspdarknet')
    ],
    value='efficientnet',
    description='Backbone:',
    style={'description_width': 'initial'}
)

mode_select = widgets.Dropdown(
    options=[
        ('Single Layer', 'single'),
        ('Multiple Layers', 'multi')
    ],
    value='single',
    description='Mode:',
    style={'description_width': 'initial'}
)

# Visualisasi modul
viz_module_select = widgets.RadioButtons(
    options=[
        ('Full Model', 'full'),
        ('Backbone Only', 'backbone'),
        ('Parameters', 'parameters')
    ],
    value='full',
    description='Visualisasi:',
    style={'description_width': 'initial'},
    layout={'width': 'max-content'}
)

# Tampilkan UI
display(widgets.VBox([
    widgets.HTML("<h2>üîç Visualisasi Model</h2>"),
    widgets.HTML("<p>Visualisasi struktur dan parameter model berdasarkan konfigurasi.</p>"),
    widgets.HBox([backbone_select, mode_select]),
    viz_module_select,
    create_model_button,
    visualization_output
]))