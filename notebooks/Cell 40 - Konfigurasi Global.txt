# Cell 40 - Konfigurasi Global (refactored)

import os
import yaml
import torch
from pathlib import Path
from datetime import datetime

from smartcash.utils.logger import SmartCashLogger
from smartcash.utils.layer_config_manager import get_layer_config
from smartcash.ui_components.config_components import create_global_config_ui
from smartcash.handlers.ui_handlers.config_handlers import setup_global_config_handlers

# Setup direktori
BASE_DIR = Path.cwd()
CONFIG_DIR = BASE_DIR / "configs"
DATA_DIR = BASE_DIR / "data"
OUTPUT_DIR = BASE_DIR / "runs"

# Pastikan direktori ada
CONFIG_DIR.mkdir(exist_ok=True)
DATA_DIR.mkdir(exist_ok=True)
OUTPUT_DIR.mkdir(exist_ok=True)

# Inisialisasi logger dengan emoji
logger = SmartCashLogger('smartcash')
logger.start("üöÄ Inisialisasi SmartCash")

# Buat konfigurasi default
config = {
    'data_dir': str(DATA_DIR),
    'output_dir': str(OUTPUT_DIR / f"train_{datetime.now().strftime('%Y%m%d_%H%M%S')}"),
    'checkpoints_dir': str(OUTPUT_DIR / "weights"),
    'model': {
        'backbone': 'efficientnet',  # 'efficientnet' atau 'cspdarknet'
        'pretrained': True,
        'img_size': [640, 640],
        'batch_size': 16,
        'memory_limit': 0.7,  # Batas penggunaan memori (0.0-1.0)
        'workers': 4
    },
    'training': {
        'epochs': 30,
        'learning_rate': 1e-4,
        'weight_decay': 5e-4,
        'momentum': 0.937,
        'optimizer': 'adamw',  # 'adam', 'adamw', 'sgd'
        'scheduler': 'cosine',  # 'cosine', 'step', 'plateau'
        'early_stopping_patience': 5,
        'save_every': 5,
        # Augmentasi
        'fliplr': 0.5,
        'flipud': 0.0,
        'hsv_h': 0.015,
        'hsv_s': 0.7,
        'hsv_v': 0.4,
        'degrees': 0.0,
        'translate': 0.1,
        'scale': 0.5
    },
    # Layer yang akan diaktifkan
    'layers': ['banknote']  # ['banknote', 'nominal', 'security']
}

# Simpan konfigurasi ke file
config_path = CONFIG_DIR / f"train_config_{datetime.now().strftime('%Y%m%d_%H%M%S')}.yaml"
with open(config_path, 'w') as f:
    yaml.dump(config, f, default_flow_style=False)

logger.info(f"üìù Konfigurasi disimpan di {config_path}")

# Periksa ketersediaan GPU
if torch.cuda.is_available():
    gpu_info = f"GPU: {torch.cuda.get_device_name(0)}"
    gpu_memory = f"Memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.2f} GB"
    logger.info(f"üñ•Ô∏è {gpu_info}, {gpu_memory}")
else:
    logger.warning("‚ö†Ô∏è GPU tidak terdeteksi, menggunakan CPU")

# Inisialisasi layer config manager
layer_config = get_layer_config()
active_layers = config['layers']
available_layers = layer_config.get_layer_names()

# Tampilkan informasi layer yang diaktifkan
logger.info(f"üîç Layer yang diaktifkan: {active_layers}")

# Analisis konfigurasi layer
for layer in active_layers:
    layer_info = layer_config.get_layer_config(layer)
    if layer_info:
        class_names = layer_info['classes']
        class_ids = layer_info['class_ids']
        logger.info(f"üìä Layer '{layer}': {len(class_names)} kelas ({', '.join(class_names)})")
    else:
        logger.warning(f"‚ö†Ô∏è Layer '{layer}' tidak ditemukan dalam konfigurasi")

# Jumlah total kelas
total_classes = layer_config.get_total_classes()
logger.info(f"üî¢ Total kelas yang terdeteksi: {total_classes}")

# Buat UI komponen
ui_components = create_global_config_ui(
    config=config, 
    base_dir=BASE_DIR,
    active_layers=active_layers,
    available_layers=available_layers
)

# Setup handlers untuk komponen UI
setup_global_config_handlers(
    ui_components=ui_components,
    config=config,
    config_path=config_path,
    logger=logger
)

# Tampilkan UI
display(ui_components['ui'])

logger.success("‚úÖ Konfigurasi global siap digunakan")