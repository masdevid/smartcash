# Cell 8.5: Memory Optimization - Untuk optimasi memori khusus Google Colab

import torch
import gc
import psutil
import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display, clear_output
import pickle
from pathlib import Path
import time
from tqdm.auto import tqdm

# Import modules
try:
    from smartcash.utils.memory_optimizer import MemoryOptimizer
    from smartcash.utils.logger import get_logger
    from smartcash.utils.enhanced_cache import EnhancedCache
    from smartcash.handlers.model_handler import ModelHandler
except ImportError as e:
    print(f"‚ö†Ô∏è Error importing modules: {str(e)}")
    raise

# Setup logger
logger = get_logger("memory_optimizer", log_to_console=True)

# Memuat model_handler dan config dari cell sebelumnya jika tersedia, jika tidak, buat baru
if 'model_handler' not in globals() or 'config' not in globals():
    try:
        # Load config
        with open('config.pkl', 'rb') as f:
            config = pickle.load(f)
            
        # Initialize model handler
        model_handler = ModelHandler(config=config, logger=logger)
        print("‚úÖ Model handler berhasil dibuat")
    except Exception as e:
        print(f"‚ùå Gagal membuat model handler: {str(e)}")
        raise

# Inisialisasi memory optimizer
memory_optimizer = MemoryOptimizer(logger=logger)

# Inisialisasi enhanced cache
try:
    cache = EnhancedCache(
        cache_dir=".cache/smartcash",
        max_size_gb=1.0,
        logger=logger
    )
except Exception as e:
    print(f"‚ö†Ô∏è Error initializing EnhancedCache: {str(e)}")
    # Fallback
    cache = None

# UI untuk memori management
check_memory_button = widgets.Button(
    description='Cek Status Memori',
    button_style='info',
    icon='server'
)

clear_memory_button = widgets.Button(
    description='Bersihkan Memori GPU',
    button_style='warning',
    icon='trash'
)

optimize_button = widgets.Button(
    description='Optimasi Batch Size',
    button_style='success',
    icon='cogs'
)

# Tambahan UI untuk manajemen cache
clear_cache_button = widgets.Button(
    description='Bersihkan Cache',
    button_style='danger',
    icon='trash-alt'
)

verify_cache_button = widgets.Button(
    description='Verifikasi Cache',
    button_style='info',
    icon='check-circle'
)

memory_output = widgets.Output()

def on_check_memory_button_clicked(b):
    with memory_output:
        clear_output()
        memory_optimizer.check_gpu_status()
        
        # Tambahkan informasi CPU dan RAM
        cpu_usage = psutil.cpu_percent()
        ram = psutil.virtual_memory()
        
        print(f"\nüñ•Ô∏è CPU Usage: {cpu_usage}%")
        print(f"üíæ RAM: {ram.used / (1024**3):.2f} GB / {ram.total / (1024**3):.2f} GB ({ram.percent}%)")
        
        # Tambahkan visualisasi penggunaan memori jika GPU tersedia
        stats = memory_optimizer.get_optimization_stats()
        
        # Create figure with multiple plots
        plt.figure(figsize=(15, 5))
        
        # Plot 1: GPU Memory (if available)
        if 'gpu_available' in stats and stats['gpu_available'] and 'total_memory' in stats:
            plt.subplot(1, 3, 1)
            
            # Data untuk pie chart GPU
            gpu_sizes = [stats['used_memory'], stats['free_memory']]
            gpu_labels = [f'Terpakai\n{gpu_sizes[0]:.1f} MB', f'Bebas\n{gpu_sizes[1]:.1f} MB']
            plt.pie(gpu_sizes, labels=gpu_labels, autopct='%1.1f%%', colors=['#ff9999','#66b3ff'])
            plt.title(f'GPU Memory ({stats["gpu_name"]})')
        
        # Plot 2: RAM Usage
        plt.subplot(1, 3, 2)
        ram_sizes = [ram.used / (1024**3), (ram.total - ram.used) / (1024**3)]
        ram_labels = [f'Terpakai\n{ram_sizes[0]:.1f} GB', f'Bebas\n{ram_sizes[1]:.1f} GB']
        plt.pie(ram_sizes, labels=ram_labels, autopct='%1.1f%%', colors=['#99ff99','#ffcc99'])
        plt.title('RAM')
        
        # Plot 3: Cache Usage (if available)
        if cache:
            plt.subplot(1, 3, 3)
            cache_stats = cache.get_stats()
            
            cache_labels = ['Terpakai', 'Tersedia']
            cache_sizes = [
                cache_stats['cache_size_mb'],
                cache_stats['max_size_mb'] - cache_stats['cache_size_mb']
            ]
            plt.pie(cache_sizes, labels=cache_labels, autopct='%1.1f%%', colors=['#9b59b6','#3498db'])
            plt.title(f'Cache ({cache_stats["file_count"]} file)')
        
        plt.tight_layout()
        plt.show()