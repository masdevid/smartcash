# Cell 8.7: Model Exporter - Untuk mengekspor model dalam format yang dapat digunakan di produksi

from smartcash.utils.model_exporter import ModelExporter
import torch
import ipywidgets as widgets
from IPython.display import display, clear_output
import os
from datetime import datetime

# Memastikan model_manager dan logger tersedia
# Gunakan model_manager yang sudah diinisialisasi sebelumnya
if 'model_manager' not in globals():
    # Jika belum ada, coba gunakan model_handler dari cell sebelumnya jika tersedia
    if 'model_handler' in globals():
        model_manager = model_handler
    else:
        # Jika tidak tersedia, buat instance baru
        from smartcash.handlers.model_handler import ModelHandler
        model_manager = ModelHandler(
            config=config, 
            config_path='configs/base_config.yaml',
            num_classes=config.get('model', {}).get('num_classes', 7)
        )

# Pastikan logger tersedia
if 'logger' not in globals():
    from smartcash.utils.logger import get_logger
    logger = get_logger("model_exporter", log_to_console=True, log_to_file=True, log_to_colab=True)

# Inisialisasi model exporter menggunakan kelas dari modul utils
model_exporter = ModelExporter(model_manager, logger)

# Inisialisasi CheckpointHandler
from smartcash.handlers.checkpoint_handler import CheckpointHandler
checkpoint_handler = CheckpointHandler(logger=logger)

# UI untuk ekspor model
export_format_selector = widgets.Dropdown(
    options=[
        ('TorchScript (PyTorch)', 'torchscript'),
        ('ONNX (Open Format)', 'onnx')
    ],
    value='torchscript',
    description='Format Ekspor:',
    style={'description_width': 'initial'}
)

# Opsi optimasi
optimize_checkbox = widgets.Checkbox(
    value=True,
    description='Optimalkan untuk Inferensi',
    style={'description_width': 'initial'}
)

# Opsi salin ke Drive
copy_to_drive_checkbox = widgets.Checkbox(
    value=True,
    description='Salin ke Google Drive',
    style={'description_width': 'initial'},
    disabled=not os.path.exists("/content/drive")
)

export_button = widgets.Button(
    description='Ekspor Model',
    button_style='primary',
    icon='download'
)

export_output = widgets.Output()

def on_export_button_clicked(b):
    """Handler untuk tombol ekspor"""
    # Update tombol
    export_button.description = "Memproses..."
    export_button.disabled = True
    
    with export_output:
        clear_output()
        
        # Ambil checkpoint terbaik
        checkpoints = checkpoint_handler.list_checkpoints()
        best_checkpoint = None
        
        if checkpoints['best']:
            best_checkpoint = checkpoints['best'][0]
            print(f"üèÜ Menggunakan checkpoint terbaik: {best_checkpoint.name}")
        else:
            print("‚ö†Ô∏è Tidak ada checkpoint terbaik, mencari checkpoint lain...")
            
            if checkpoints['latest']:
                best_checkpoint = checkpoints['latest'][0]
                print(f"üîÑ Menggunakan checkpoint terakhir: {best_checkpoint.name}")
            elif checkpoints['epoch']:
                best_checkpoint = checkpoints['epoch'][0]
                print(f"üïí Menggunakan checkpoint epoch: {best_checkpoint.name}")
            else:
                print("‚ùå Tidak ada checkpoint yang tersedia")
                export_button.description = "Ekspor Model"
                export_button.disabled = False
                return
        
        # Jalankan ekspor berdasarkan format yang dipilih
        if export_format_selector.value == 'torchscript':
            result = model_exporter.export_to_torchscript(
                checkpoint_path=best_checkpoint,
                optimize=optimize_checkbox.value
            )
        elif export_format_selector.value == 'onnx':
            result = model_exporter.export_to_onnx(
                checkpoint_path=best_checkpoint
            )
        else:
            print(f"‚ùå Format ekspor tidak valid: {export_format_selector.value}")
            export_button.description = "Ekspor Model"
            export_button.disabled = False
            return
        
        # Cek hasil ekspor
        if result:
            print(f"\n‚úÖ Model berhasil diekspor:")
            print(f"üìÅ Path: {result['path']}")
            print(f"üìä Ukuran: {result['size']}")
            print(f"üîÑ Format: {result['format']}")
            print(f"üïí Timestamp: {result['timestamp']}")
            
            # Salin ke Drive jika diminta
            if copy_to_drive_checkbox.value and os.path.exists("/content/drive"):
                drive_path = model_exporter.copy_to_drive(result['path'])
                if drive_path:
                    print(f"\n‚úÖ Model berhasil disalin ke Google Drive:")
                    print(f"üìÅ Path: {drive_path}")
        else:
            print("‚ùå Ekspor model gagal")
    
    # Reset tombol
    export_button.description = "Ekspor Model"
    export_button.disabled = False

export_button.on_click(on_export_button_clicked)

# Tampilkan UI
display(widgets.VBox([
    widgets.HTML("<h2>üì¶ Ekspor Model</h2>"),
    widgets.HTML("<p>Ekspor model checkpoint terbaik ke format yang dapat digunakan di produksi.</p>"),
    export_format_selector,
    widgets.HBox([optimize_checkbox, copy_to_drive_checkbox]),
    export_button,
    export_output
]))