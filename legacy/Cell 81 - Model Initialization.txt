# Cell 8.1: Model initialization - Inisialisasi dan konfigurasi model dengan manajemen memori yang optimal

import os
import torch
import yaml
import gc
import logging
import sys
from pathlib import Path
from datetime import datetime
from IPython.display import display, HTML, clear_output
import ipywidgets as widgets
from tqdm.auto import tqdm
import numpy as np
import matplotlib.pyplot as plt
import traceback
import pickle
from typing import Dict, Any, Optional
from contextlib import contextmanager

# ===== 1. UTILITY FUNCTIONS =====
@contextmanager
def memory_manager():
    """Context manager untuk mengoptimalkan penggunaan memori."""
    try:
        yield
    finally:
        gc.collect()
        if torch.cuda.is_available():
            torch.cuda.empty_cache()

def setup_gpu() -> Dict[str, Any]:
    """Setup dan dapatkan informasi GPU."""
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    gpu_info = {'device': device}
    
    if torch.cuda.is_available():
        gpu_info.update({
            'name': torch.cuda.get_device_name(0),
            'memory_allocated': torch.cuda.memory_allocated(0) / (1024**2),
            'memory_reserved': torch.cuda.memory_reserved(0) / (1024**2),
            'memory_total': torch.cuda.get_device_properties(0).total_memory / (1024**2)
        })
        
        # Optimize CUDA settings
        if hasattr(torch.backends, 'cudnn'):
            torch.backends.cudnn.benchmark = True
            torch.backends.cudnn.deterministic = False
            
    return gpu_info

def safe_load_pickle(file_path: str, error_msg: str) -> Any:
    """Safely load pickle files with error handling."""
    try:
        with open(file_path, 'rb') as f:
            return pickle.load(f)
    except Exception as e:
        logger.error(f"{error_msg}: {str(e)}")
        raise

# ===== 2. ENVIRONMENT SETUP =====
# Add smartcash to PYTHONPATH
if not os.getcwd() in sys.path:
    sys.path.append(os.getcwd())

# Create necessary directories
os.makedirs("logs", exist_ok=True)
os.makedirs("checkpoints", exist_ok=True)
os.makedirs("exports", exist_ok=True)

# Setup logger
try:
    from smartcash.utils.logger import get_logger, SmartCashLogger
    logger = get_logger("model_manager", log_to_console=True, log_to_file=True, log_to_colab=True)
    logger.info("‚úÖ Logger initialized successfully")
except Exception as e:
    print(f"‚ö†Ô∏è Failed to import SmartCashLogger: {str(e)}")
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f"logs/smartcash_{datetime.now().strftime('%Y-%m-%d')}.log"),
            logging.StreamHandler(sys.stdout)
        ]
    )
    from smartcash.utils.simple_logger import SimpleLogger
    logger = SimpleLogger("model_manager")

# ===== 3. MODEL IMPORTS =====
try:
    # Core model imports
    from smartcash.models.backbones.cspdarknet import CSPDarknet
    from smartcash.models.backbones.efficientnet import EfficientNetBackbone
    from smartcash.models.yolov5_model import YOLOv5Model
    from smartcash.handlers.model_handler import ModelHandler
    
    # Utility imports
    from smartcash.utils.early_stopping import EarlyStopping
    from smartcash.utils.model_visualizer import ModelVisualizer
    from smartcash.handlers.checkpoint_handler import CheckpointHandler
    from smartcash.handlers.data_manager import DataManager
    
    # Enhanced utilities
    from smartcash.utils.enhanced_cache import EnhancedCache
    from smartcash.utils.layer_config_manager import get_layer_config
    
    logger.success("üöÄ Model modules imported successfully")
except Exception as e:
    logger.error(f"‚ùå Failed to import model modules: {str(e)}")
    logger.error(traceback.format_exc())
    raise

# ===== 4. MODEL CREATION AND SETUP =====
with memory_manager():
    # Load configurations
    config = safe_load_pickle('config.pkl', "Failed to load config")
    dataloaders = safe_load_pickle('dataloaders.pkl', "Failed to load dataloaders")
    
    try:
        # Setup layer config
        layer_config = get_layer_config()
        active_layers = config.get('layers', ['banknote'])
        
        # Initialize enhanced cache
        cache = EnhancedCache(
            cache_dir=".cache/smartcash",
            max_size_gb=1.0,
            logger=logger
        )
        
        # Initialize handlers
        model_handler = ModelHandler(
            config=config,
            logger=logger
        )
        checkpoint_handler = CheckpointHandler(
            output_dir=config.get('output_dir', 'runs/train/weights'),
            logger=logger
        )
        
        # Create model and move to device
        model = model_handler.create_model(backbone_type=config['model']['backbone'])
        gpu_info = setup_gpu()
        model = model.to(gpu_info['device'])
        
        # Initialize training components
        early_stopping = EarlyStopping(
            patience=config['training'].get('early_stopping_patience', 10),
            logger=logger
        )
        model_visualizer = ModelVisualizer(
            output_dir=config.get('output_dir', 'runs/train'),
            logger=logger
        )
        
        # Setup optimizer with gradient clipping
        optimizer = model_handler.get_optimizer(model, clip_grad_norm=1.0)
        scheduler = model_handler.get_scheduler(optimizer)
        
        # Save model components
        model_components = {
            'model': model,
            'optimizer': optimizer,
            'scheduler': scheduler,
            'early_stopping': early_stopping,
            'checkpoint_handler': checkpoint_handler,
            'model_visualizer': model_visualizer,
            'device': gpu_info['device'],
            'layer_config': layer_config,
            'cache': cache
        }
        
        with open('model_components.pkl', 'wb') as f:
            pickle.dump(model_components, f)
        
        # Log model information
        logger.info("\n=== Model Configuration ===")
        logger.info(f"üß† Backbone: {config['model']['backbone']}")
        logger.info(f"üî¢ Number of classes: {config['model']['num_classes']}")
        logger.info(f"üìê Image size: {config['model']['img_size']}")
        logger.info(f"üîç Detection layers: {config['layers']}")
        
        # Log GPU information
        if torch.cuda.is_available():
            logger.info("\n=== GPU Status ===")
            logger.info(f"üìä GPU: {gpu_info['name']}")
            logger.info(f"üìä Total memory: {gpu_info['memory_total']:.2f} MB")
            logger.info(f"üìä Memory allocated: {gpu_info['memory_allocated']:.2f} MB")
            logger.info(f"üìä Memory reserved: {gpu_info['memory_reserved']:.2f} MB")
            logger.info(f"üìä Memory available: {gpu_info['memory_total'] - gpu_info['memory_reserved']:.2f} MB")
            logger.info("üöÄ CUDA optimization: Enabled")
        
        # Log cache status
        cache_stats = cache.get_stats()
        logger.info("\n=== Cache Status ===")
        logger.info(f"üì¶ Cache size: {cache_stats['cache_size_mb']:.2f} MB")
        logger.info(f"üì¶ Cache files: {cache_stats['file_count']}")
        
        logger.success("‚ú® Model creation and setup completed successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Error during model setup: {str(e)}")
        logger.error(traceback.format_exc())
        raise