# Cell 7.3: Augmentasi Data

# Pastikan objek global tersedia
try:
    with open('data_globals.pkl', 'rb') as f:
        globals_dict = pickle.load(f)
    
    data_manager = globals_dict['data_manager']
    aug_manager = globals_dict['aug_manager']
    config = globals_dict['config']
    logger = globals_dict['logger']
except Exception as e:
    print(f"❌ Error loading global objects: {str(e)}")
    print("💡 Jalankan Cell 7.1 terlebih dahulu untuk menginisialisasi dataset")

# Widget untuk mengontrol augmentasi
augmentation_type = widgets.RadioButtons(
    options=[
        ('Posisi (rotasi, perspektif, flip)', 'position'),
        ('Pencahayaan (kontras, bayangan, saturasi)', 'lighting'),
        ('Kombinasi (posisi dan pencahayaan)', 'combined'),
        ('Rotasi Ekstrim (untuk orientasi bervariasi)', 'extreme_rotation')
    ],
    value='combined',
    description='Tipe Augmentasi:',
    style={'description_width': 'initial'},
    layout={'width': 'max-content'}
)

split_selection = widgets.SelectMultiple(
    options=[('Train', 'train'), ('Validation', 'valid'), ('Test', 'test')],
    value=['train'],
    description='Dataset Split:',
    style={'description_width': 'initial'},
    layout={'width': '300px'}
)

num_workers_slider = widgets.IntSlider(
    value=2,  # Nilai default lebih kecil untuk Colab
    min=1,
    max=4,   # Nilai maksimum lebih kecil untuk Colab
    step=1,
    description='Jumlah Workers:',
    style={'description_width': 'initial'}
)

num_variations_slider = widgets.IntSlider(
    value=2,
    min=1,
    max=5,
    step=1,
    description='Jumlah Variasi:',
    style={'description_width': 'initial'},
    tooltip='Jumlah variasi gambar yang akan dihasilkan untuk setiap gambar input'
)

augment_button = widgets.Button(
    description='Augmentasi Data',
    button_style='primary',
    icon='plus'
)

clean_button = widgets.Button(
    description='Bersihkan Augmentasi',
    button_style='danger',
    icon='trash-alt'
)

augmentation_output = widgets.Output()

def on_augment_button_clicked(b):
    """Callback untuk augmentasi data"""
    # Disable tombol selama proses
    augment_button.disabled = True
    augment_button.description = "Memproses..."
    
    with augmentation_output:
        clear_output()
        
        splits = split_selection.value
        aug_type = augmentation_type.value
        num_workers = num_workers_slider.value
        num_variations = num_variations_slider.value
        
        if not splits:
            print("⚠️ Pilih setidaknya satu split dataset!")
            augment_button.disabled = False
            augment_button.description = "Augmentasi Data"
            return
            
        logger.info(f"🎨 Memulai augmentasi untuk {', '.join(splits)} dengan tipe {aug_type}...")
        
        all_stats = {}
        for split in splits:
            logger.info(f"🔄 Memproses split {split}...")
            
            try:
                # Gunakan OptimizedAugmentation
                stats = aug_manager.augment_dataset(
                    split=split,
                    augmentation_types=[aug_type],
                    num_variations=num_variations,
                    num_workers=num_workers,
                    validate_results=True
                )
                
                all_stats[split] = {
                    'processed': stats.get('processed', 0),
                    'augmented': stats.get('augmented', 0),
                    'failed': stats.get('failed', 0),
                    'duration': stats.get('duration', 0)
                }
                
                logger.success(f"✅ Augmentasi {split} selesai: {stats.get('augmented', 0)} gambar dihasilkan")
                
            except Exception as e:
                logger.error(f"❌ Error saat mengaugmentasi {split}: {str(e)}")
                all_stats[split] = {'error': str(e)}
            
        logger.success("✨ Augmentasi selesai!")
        
        # Tampilkan statistik dalam bentuk tabel
        stats_data = []
        for split, stat in all_stats.items():
            if 'error' in stat:
                stats_data.append({
                    'Split': split.capitalize(),
                    'Status': 'Error',
                    'Error': stat['error']
                })
            else:
                stats_data.append({
                    'Split': split.capitalize(),
                    'Diproses': stat['processed'],
                    'Hasil Augmentasi': stat['augmented'],
                    'Gagal': stat['failed'],
                    'Durasi (detik)': round(stat.get('duration', 0), 2)
                })
            
        if stats_data:
            display(pd.DataFrame(stats_data))
            
        # Refresh statistik dataset
        # Re-import get_dataset_info function
        from IPython import get_ipython
        get_ipython().run_cell('from Cell_7_2_Informasi_Dataset import get_dataset_info')
        get_dataset_info()
        
        # Force garbage collection
        gc.collect()
        
    # Re-enable tombol
    augment_button.disabled = False
    augment_button.description = "Augmentasi Data"

def on_clean_button_clicked(b):
    """Callback untuk membersihkan hasil augmentasi"""
    # Disable tombol selama proses
    clean_button.disabled = True
    clean_button.description = "Membersihkan..."
    
    with augmentation_output:
        clear_output()
        
        splits = split_selection.value
        
        if not splits:
            print("⚠️ Pilih setidaknya satu split dataset!")
            clean_button.disabled = False
            clean_button.description = "Bersihkan Augmentasi"
            return
            
        logger.info(f"🧹 Membersihkan hasil augmentasi untuk {', '.join(splits)}...")
        
        try:
            # Gunakan clean_augmented_data dari OptimizedAugmentation
            stats = aug_manager.clean_augmented_data(splits=list(splits))
            
            logger.success("🧹 Pembersihan selesai!")
            logger.info(f"📊 Statistik:")
            logger.info(f"• Gambar dihapus: {stats.get('removed_images', 0)}")
            logger.info(f"• Label dihapus: {stats.get('removed_labels', 0)}")
            
            # Tampilkan statistik
            display(pd.DataFrame([{
                'Gambar Dihapus': stats.get('removed_images', 0),
                'Label Dihapus': stats.get('removed_labels', 0),
                'Error': stats.get('errors', 0)
            }]))
            
            # Refresh statistik dataset
            from IPython import get_ipython
            get_ipython().run_cell('from Cell_7_2_Informasi_Dataset import get_dataset_info')
            get_dataset_info()
            
        except Exception as e:
            logger.error(f"❌ Error saat membersihkan augmentasi: {str(e)}")
            display(HTML(f"<p><strong>Error:</strong> {str(e)}</p>"))
        
        # Force garbage collection
        gc.collect()
        
    # Re-enable tombol
    clean_button.disabled = False
    clean_button.description = "Bersihkan Augmentasi"

augment_button.on_click(on_augment_button_clicked)
clean_button.on_click(on_clean_button_clicked)

# Buat tab augmentasi
tab_aug_content = widgets.VBox([
    widgets.HTML("<h2>🔀 Augmentasi Data</h2>"),
    widgets.HTML("<p>Augmentasi data membantu meningkatkan variasi dataset dan membantu model belajar lebih baik.</p>"),
    widgets.HTML("<div style='background-color: #FFF5E4; color:#FFA725; padding: 10px; border-radius: 5px; margin-bottom: 10px;'>"
                "<b>⚠️ Catatan Khusus untuk Google Colab:</b><br>"
                "- Augmentasi dapat memakan waktu & memori lebih banyak dalam lingkungan Colab<br>"
                "- Gunakan worker dengan jumlah <b>1-2</b> untuk performa optimal<br>"
                "- Batasi augmentasi pada split kecil (Testing) terlebih dahulu sebelum memproses dataset besar<br>"
                "- Gunakan jumlah variasi yang lebih kecil (1-2) untuk mengurangi beban memori"
                "</div>"),
    widgets.VBox([
        widgets.HTML("<h3>🔄 Pengaturan Augmentasi</h3>"),
        augmentation_type,
        widgets.HBox([split_selection, widgets.VBox([num_workers_slider, num_variations_slider])]),
        widgets.HBox([augment_button, clean_button]),
        augmentation_output
    ])
])

display(tab_aug_content)