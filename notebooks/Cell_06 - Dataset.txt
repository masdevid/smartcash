# Cell 6: Dataset - Download Dataset dengan Google Drive Integration

import os
import yaml
import shutil
from pathlib import Path
import ipywidgets as widgets
from IPython.display import display, HTML
from tqdm.notebook import tqdm

# Import RoboflowDownloader dari modul utils
from smartcash.utils.roboflow_downloader import download_dataset_from_roboflow, RoboflowDownloader

# Cek apakah kita berada di Google Colab
def is_colab():
    try:
        import google.colab
        return True
    except ImportError:
        return False

# Mount Google Drive jika kita berada di Colab
drive_path = None
if is_colab():
    try:
        from google.colab import drive
        drive.mount('/content/drive')
        drive_path = '/content/drive/MyDrive/SmartCash'
        # Buat direktori SmartCash di Drive jika belum ada
        os.makedirs(drive_path, exist_ok=True)
        print(f"‚úÖ Google Drive berhasil di-mount di {drive_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è Gagal mount Google Drive: {str(e)}")
        drive_path = None
else:
    print("‚ÑπÔ∏è Tidak terdeteksi di Google Colab. Gunakan penyimpanan lokal.")

# Opsi penyimpanan data
storage_options = widgets.RadioButtons(
    options=[('Lokal', 'local'), ('Google Drive', 'drive')],
    value='local' if drive_path is None else 'drive',
    description='Simpan dataset di:',
    disabled=not is_colab() or drive_path is None,
    layout={'width': 'max-content'},
    style={'description_width': 'initial'}
)

# Buat direktori dataset di Drive jika opsi Drive dipilih
def setup_dataset_dirs(base_path):
    dirs = [
        f"{base_path}/data/train/images",
        f"{base_path}/data/train/labels",
        f"{base_path}/data/valid/images", 
        f"{base_path}/data/valid/labels",
        f"{base_path}/data/test/images",
        f"{base_path}/data/test/labels"
    ]
    for d in dirs:
        os.makedirs(d, exist_ok=True)
    return dirs

# Tombol download dataset
download_button = widgets.Button(
    description='Download Dataset',
    button_style='info',
    icon='download'
)

# Tambahkan checkbox untuk force download
force_download_checkbox = widgets.Checkbox(
    value=False,
    description='Paksa download ulang',
    disabled=False
)

# Tombol untuk membersihkan file sementara
cleanup_button = widgets.Button(
    description='Bersihkan File Sementara',
    button_style='warning',
    icon='trash'
)

def on_download_button_clicked(b):
    """Callback untuk download dataset menggunakan Roboflow API"""
    # Disable tombol saat proses berlangsung
    download_button.disabled = True
    download_button.description = "Sedang Mengunduh..."
    
    try:
        # Load konfigurasi
        config_path = 'configs/experiment_config.yaml'
        if os.path.exists(config_path):
            with open(config_path, 'r') as f:
                config = yaml.safe_load(f)
        else:
            with open('configs/base_config.yaml', 'r') as f:
                config = yaml.safe_load(f)
        
        # Verifikasi konfigurasi minimum
        if not config.get('data', {}).get('roboflow', {}).get('api_key'):
            print("‚ùå API key tidak ditemukan dalam konfigurasi")
            print("üí° Tip: Gunakan tombol 'Simpan Konfigurasi' untuk menyimpan API key")
            download_button.disabled = False
            download_button.description = "Download Dataset"
            return
        
        # Update konfigurasi untuk menyimpan di Drive jika dipilih
        storage_option = storage_options.value
        if storage_option == 'drive' and drive_path:
            # Setup direktori dataset di Drive
            print(f"üìÇ Menyiapkan direktori dataset di Google Drive...")
            setup_dataset_dirs(drive_path)
            
            # Update path dalam konfigurasi
            if 'data' not in config:
                config['data'] = {}
            if 'local' not in config['data']:
                config['data']['local'] = {}
            
            config['data']['local']['train'] = f"{drive_path}/data/train"
            config['data']['local']['valid'] = f"{drive_path}/data/valid"
            config['data']['local']['test'] = f"{drive_path}/data/test"
            
            # Simpan konfigurasi yang diupdate
            with open(config_path, 'w') as f:
                yaml.dump(config, f, default_flow_style=False)
            
            print(f"‚úÖ Konfigurasi diperbarui untuk menggunakan Google Drive")
            
            # Buat instance RoboflowDownloader dengan konfigurasi yang diperbarui
            downloader = RoboflowDownloader(
                config=config, 
                output_dir=f"{drive_path}/data",
                config_path=config_path
            )
            
            # Jalankan proses download
            results = downloader.run_download_pipeline(force_download=force_download_checkbox.value)
        else:
            # Gunakan lokasi default
            results = download_dataset_from_roboflow(config, force=force_download_checkbox.value)
        
        if results.get('success', False):
            # Tampilkan statistik akhir jika sukses
            stats = results.get('stats', {}).get('final', results.get('stats', {}).get('existing', {}))
            
            train_count = stats.get('train', 0)
            valid_count = stats.get('valid', 0) 
            test_count = stats.get('test', 0)
            total_count = train_count + valid_count + test_count
            
            print(f"\n‚úÖ Dataset berhasil diunduh dan disiapkan")
            print(f"üìä Statistik dataset:")
            print(f"   ‚Ä¢ Total gambar: {total_count}")
            print(f"   ‚Ä¢ Training: {train_count} gambar")
            print(f"   ‚Ä¢ Validasi: {valid_count} gambar")
            print(f"   ‚Ä¢ Testing: {test_count} gambar")
            print(f"üìÅ Lokasi: {drive_path + '/data' if storage_option == 'drive' else './data'}")
            
            # Update tombol untuk menunjukkan selesai
            download_button.button_style = "success"
            download_button.description = "Download Selesai"
            download_button.icon = "check"
        else:
            print("\n‚ö†Ô∏è Proses download tidak berhasil diselesaikan")
            # Reset tombol
            download_button.disabled = False
            download_button.description = "Download Dataset"
            download_button.button_style = "danger"
            
    except Exception as e:
        print(f"‚ùå Error saat proses download: {str(e)}")
        # Reset tombol
        download_button.disabled = False
        download_button.description = "Download Dataset"
        download_button.button_style = "danger"
    finally:
        # Re-enable tombol setelah selesai
        download_button.disabled = False

def on_cleanup_button_clicked(b):
    """Callback untuk membersihkan file sementara"""
    cleanup_button.disabled = True
    cleanup_button.description = "Sedang Membersihkan..."
    
    try:
        # Bersihkan file zip
        print("üßπ Mencari dan membersihkan file zip...")
        zip_found = False
        for zip_file in Path('.').glob('*.zip'):
            zip_found = True
            print(f"  ‚Üí Menghapus file zip: {zip_file}")
            try:
                zip_file.unlink()
            except Exception as e:
                print(f"‚ö†Ô∏è Gagal menghapus file zip {zip_file}: {str(e)}")
        
        if not zip_found:
            print("‚úÖ Tidak ditemukan file zip.")
        
        # Bersihkan direktori sementara hasil ekstraksi
        print("üßπ Mencari direktori hasil ekstraksi...")
        temp_found = False
        temp_dirs = [d for d in Path('.').glob('*') 
                    if d.is_dir() and (
                        d.name.startswith('rupiah') or 
                        d.name.endswith('-yolov5') or
                        d.name.endswith('_sample')
                    )]
        
        for temp_dir in temp_dirs:
            temp_found = True
            print(f"  ‚Üí Menghapus direktori sementara: {temp_dir}")
            try:
                shutil.rmtree(temp_dir)
            except Exception as e:
                print(f"‚ö†Ô∏è Gagal menghapus direktori {temp_dir}: {str(e)}")
        
        if not temp_found:
            print("‚úÖ Tidak ditemukan direktori sementara.")
        
        print("‚ú® Pembersihan selesai!")
        
    except Exception as e:
        print(f"‚ùå Error saat membersihkan: {str(e)}")
    finally:
        # Reset tombol
        cleanup_button.disabled = False
        cleanup_button.description = "Bersihkan File Sementara"

# Cek status folder dataset
def check_dataset_status():
    """Cek status dataset di lokasi penyimpanan yang dipilih"""
    storage_option = storage_options.value
    base_path = drive_path if storage_option == 'drive' else '.'
    
    train_dir = Path(f"{base_path}/data/train/images")
    valid_dir = Path(f"{base_path}/data/valid/images")
    test_dir = Path(f"{base_path}/data/test/images")
    
    if not train_dir.exists() or not valid_dir.exists() or not test_dir.exists():
        return {
            'status': 'missing',
            'message': f"‚ö†Ô∏è Beberapa direktori dataset tidak ditemukan di {base_path}/data"
        }
    
    train_count = len(list(train_dir.glob('*.*')))
    valid_count = len(list(valid_dir.glob('*.*')))
    test_count = len(list(test_dir.glob('*.*')))
    total_count = train_count + valid_count + test_count
    
    if total_count == 0:
        return {
            'status': 'empty',
            'message': f"‚ö†Ô∏è Dataset kosong di {base_path}/data"
        }
    
    return {
        'status': 'ok',
        'message': f"‚úÖ Dataset ditemukan di {base_path}/data dengan {total_count} gambar",
        'stats': {
            'train': train_count,
            'valid': valid_count,
            'test': test_count,
            'total': total_count
        }
    }

# Tombol untuk mengecek status dataset
check_status_button = widgets.Button(
    description='Cek Status Dataset',
    button_style='primary',
    icon='search'
)

def on_check_status_button_clicked(b):
    """Callback untuk mengecek status dataset"""
    check_status_button.disabled = True
    check_status_button.description = "Sedang Memeriksa..."
    
    try:
        result = check_dataset_status()
        print(result['message'])
        if result['status'] == 'ok':
            stats = result['stats']
            print(f"üìä Statistik dataset:")
            print(f"   ‚Ä¢ Total gambar: {stats['total']}")
            print(f"   ‚Ä¢ Training: {stats['train']} gambar")
            print(f"   ‚Ä¢ Validasi: {stats['valid']} gambar")
            print(f"   ‚Ä¢ Testing: {stats['test']} gambar")
    except Exception as e:
        print(f"‚ùå Error saat memeriksa status: {str(e)}")
    finally:
        check_status_button.disabled = False
        check_status_button.description = "Cek Status Dataset"

# Handler untuk perubahan opsi penyimpanan
def on_storage_option_change(change):
    if change['new'] == 'drive' and drive_path is None:
        print("‚ö†Ô∏è Google Drive tidak tersedia. Menggunakan penyimpanan lokal.")
        storage_options.value = 'local'

# Daftarkan handler
storage_options.observe(on_storage_option_change, names='value')

# Set event handlers untuk tombol
download_button.on_click(on_download_button_clicked)
cleanup_button.on_click(on_cleanup_button_clicked)
check_status_button.on_click(on_check_status_button_clicked)

# Tampilkan widgets dalam layout yang terorganisir
display(HTML("<h3>üóÑÔ∏è Konfigurasi Penyimpanan Dataset</h3>"))
display(storage_options)

display(HTML("<h3>üì• Download dan Pengelolaan Dataset</h3>"))
display(widgets.VBox([
    force_download_checkbox,
    widgets.HBox([download_button, cleanup_button, check_status_button])
]))

print("üí° Tips:")
print("1. Menggunakan Google Drive akan menyimpan dataset di Drive sehingga tersedia di sesi Colab berikutnya")
print("2. Centang 'Paksa download ulang' jika ingin mengunduh dataset baru meskipun sudah ada yang tersedia")
print("3. Gunakan 'Cek Status Dataset' untuk memverifikasi keberadaan dan ukuran dataset")