# Cell: Download Dataset Dengan Progress Bar
# Fungsi download yang ditingkatkan untuk dataset YOLOv5 dengan progress bar

import os
import requests
import yaml
import time
import shutil
from tqdm.notebook import tqdm
from pathlib import Path
from smartcash.smartcash.utils.roboflow_downloader import RoboflowDownloader

def download_dataset_with_progress(config):
    """
    Download dataset dari Roboflow dengan progress bar
    
    Args:
        config: Konfigurasi dengan kredensial Roboflow
    
    Returns:
        Path ke file zip yang diunduh
    """
    if config['data']['source'] != 'roboflow':
        print("‚ö†Ô∏è Konfigurasi data_source bukan 'roboflow', mengabaikan...")
        return None
    
    # Ambil kredensial dan info dari config
    workspace = config['data']['roboflow'].get('workspace', 'smartcash-wo2us')
    project = config['data']['roboflow'].get('project', 'rupiah-emisi-2022')
    version = config['data']['roboflow'].get('version', '3')
    api_key = config['data']['roboflow'].get('api_key') or os.environ.get("ROBOFLOW_API_KEY")
    
    if not api_key:
        print("‚ùå Roboflow API key tidak ditemukan. Mohon isi API key di konfigurasi.")
        return None
    
    print(f"üîÑ Menyiapkan download dari Roboflow...")
    print(f"   ‚Ä¢ Workspace: {workspace}")
    print(f"   ‚Ä¢ Project: {project}")
    print(f"   ‚Ä¢ Version: {version}")
    
    # Inisialisasi downloader
    downloader = RoboflowDownloader(
        api_key=api_key,
        workspace=workspace,
        project=project,
        version=version,
        output_dir='dataset_downloads'
    )
    
    # Cek direktori lokal
    data_dir = Path('data')
    
    # Jika dataset sudah ada, lakukan cleanup
    if data_dir.exists() and any((data_dir / 'train' / 'images').glob('*')):
        print("‚ö†Ô∏è Dataset sudah ada. Membersihkan versi lama...")
        cleanup_existing_dataset(data_dir)
    
    print(f"üì• Memulai download dataset...")
    
    try:
        start_time = time.time()
        
        # Download dataset
        dataset_path = downloader.download(format='yolov5')
        
        elapsed_time = time.time() - start_time
        print(f"‚úÖ Download selesai dalam {elapsed_time:.1f} detik")
        print(f"üìÅ Dataset tersimpan di: {dataset_path}")
        
        return str(dataset_path)
    
    except Exception as e:
        print(f"‚ùå Error saat download dataset: {str(e)}")
        
        # Restore from backup if available
        if data_dir.exists():
            restore_from_backup(data_dir)
        
        # Cleanup temporary files
        if 'dataset_path' in locals() and dataset_path.exists():
            try:
                shutil.rmtree(dataset_path)
            except Exception as e:
                print(f"‚ö†Ô∏è Gagal membersihkan file sementara: {str(e)}")
        
        return None

def restore_from_backup(data_dir: Path):
    """
    Restore dataset from latest backup
    
    Args:
        data_dir: Path to data directory
    """
    backup_dir = data_dir.parent / 'data_backups'
    
    if not backup_dir.exists():
        print("‚ö†Ô∏è Tidak ada backup yang ditemukan")
        return False
    
    # Get latest backup
    backups = sorted(backup_dir.iterdir(), key=os.path.getmtime, reverse=True)
    
    if not backups:
        print("‚ö†Ô∏è Tidak ada backup yang tersedia")
        return False
    
    latest_backup = backups[0]
    print(f"üîÑ Memulihkan dari backup terakhir: {latest_backup}")
    
    try:
        # Restore all files
        for split in ['train', 'valid', 'test']:
            for file_type in ['images', 'labels']:
                src = latest_backup / split / file_type
                if src.exists():
                    dst = data_dir / split / file_type
                    dst.parent.mkdir(parents=True, exist_ok=True)
                    shutil.copytree(src, dst)
        
        print(f"‚úÖ Dataset berhasil dipulihkan dari {latest_backup}")
        return True
    except Exception as e:
        print(f"‚ùå Gagal memulihkan dataset: {str(e)}")
        return False

def cleanup_existing_dataset(data_dir: Path):
    """
    Membersihkan dataset yang ada dengan membuat backup dan menghapus file lama
    
    Args:
        data_dir: Path ke direktori data
    """
    backup_dir = data_dir.parent / 'data_backups'
    timestamp = time.strftime('%Y%m%d_%H%M%S')
    current_backup = backup_dir / timestamp
    
    try:
        # Delete previous backup if exists
        if backup_dir.exists():
            shutil.rmtree(backup_dir)
        
        # Buat direktori backup
        backup_dir.mkdir(exist_ok=True)
        current_backup.mkdir()
        
        print(f"üîÑ Membuat backup dataset ke {current_backup}")
        
        # Backup semua file
        for split in ['train', 'valid', 'test']:
            for file_type in ['images', 'labels']:
                src = data_dir / split / file_type
                if src.exists():
                    dst = current_backup / split / file_type
                    dst.parent.mkdir(parents=True, exist_ok=True)
                    shutil.copytree(src, dst)
        
        print(f"üßπ Membersihkan direktori data...")
        
        # Hapus file lama
        for split in ['train', 'valid', 'test']:
            for file_type in ['images', 'labels']:
                target_dir = data_dir / split / file_type
                if target_dir.exists():
                    shutil.rmtree(target_dir)
                    target_dir.mkdir()
        
        print(f"‚úÖ Cleanup selesai. Backup tersimpan di {current_backup}")
        
    except Exception as e:
        print(f"‚ùå Error saat cleanup dataset: {str(e)}")
        raise

# Tombol download dataset
download_button = widgets.Button(
    description='Download Dataset (Progress)',
    button_style='info',
    icon='download'
)

def on_download_button_clicked(b):
    """Callback untuk download dataset dengan progress bar"""
    with open('configs/experiment_config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    dataset_location = download_dataset_with_progress(config)
    
    if dataset_location:
        print(f"\n‚úÖ Dataset siap di: {dataset_location}")
        
        # Tampilkan tombol untuk ekstraksi
        display_extract_button(dataset_location)
    else:
        print("\n‚ö†Ô∏è Gagal mengunduh dataset atau dataset sudah tersedia")

download_button.on_click(on_download_button_clicked)
display(download_button)

# Fungsi untuk menampilkan tombol ekstrak dari lokasi tertentu
def display_extract_button(dataset_location):
    extract_button = widgets.Button(
        description='Ekstrak Dataset',
        button_style='success',
        icon='folder-open'
    )
    
    def on_extract_clicked(b):
        from pathlib import Path
        import shutil
        from tqdm.notebook import tqdm
        
        src_path = Path(dataset_location)
        dst_path = Path('data')
        
        # Pastikan direktori tujuan ada
        for split in ['train', 'valid', 'test']:
            (dst_path / split / 'images').mkdir(parents=True, exist_ok=True)
            (dst_path / split / 'labels').mkdir(parents=True, exist_ok=True)
        
        print(f"üîÑ Mengekstrak dataset dari {src_path} ke {dst_path}...")
        
        # Cari semua file gambar dan label
        image_extensions = ['.jpg', '.jpeg', '.png']
        label_extensions = ['.txt']
        
        total_copied = 0
        
        # Untuk setiap split dataset
        for split in ['train', 'valid', 'test']:
            split_dir = src_path / split
            
            if not split_dir.exists():
                print(f"‚ö†Ô∏è Direktori {split} tidak ditemukan")
                continue
                
            print(f"\n‚ú® Memproses {split}...")
            
            # Salin gambar
            img_dir = split_dir / 'images'
            if img_dir.exists():
                img_files = []
                for ext in image_extensions:
                    img_files.extend(img_dir.glob(f'*{ext}'))
                
                for img in tqdm(img_files, desc=f"Gambar {split}"):
                    dst_file = dst_path / split / 'images' / img.name
                    if not dst_file.exists():
                        shutil.copy2(img, dst_file)
                        total_copied += 1
            
            # Salin label
            lbl_dir = split_dir / 'labels'
            if lbl_dir.exists():
                lbl_files = []
                for ext in label_extensions:
                    lbl_files.extend(lbl_dir.glob(f'*{ext}'))
                
                for lbl in tqdm(lbl_files, desc=f"Label {split}"):
                    dst_file = dst_path / split / 'labels' / lbl.name
                    if not dst_file.exists():
                        shutil.copy2(lbl, dst_file)
                        total_copied += 1
        
        # Cek hasil
        print(f"\n‚úÖ Total {total_copied} file disalin ke {dst_path}")
        
        # Update konfigurasi hanya jika file disalin
        if total_copied > 0:
            try:
                with open('configs/experiment_config.yaml', 'r') as f:
                    config = yaml.safe_load(f)
                
                config['data']['source'] = 'local'
                
                with open('configs/experiment_config.yaml', 'w') as f:
                    yaml.dump(config, f, default_flow_style=False)
                
                print("‚úÖ Konfigurasi diperbarui: data_source = local")
            except Exception as e:
                print(f"‚ö†Ô∏è Gagal update konfigurasi: {str(e)}")
        else:
            print("‚ö†Ô∏è Tidak ada file yang disalin, konfigurasi tidak diperbarui")
        
        # Bersihkan file yang diunduh
        try:
            print(f"üßπ Membersihkan file sementara di {src_path}...")
            if src_path.exists():
                shutil.rmtree(src_path)
            print("‚úÖ File sementara berhasil dibersihkan")
        except Exception as e:
            print(f"‚ö†Ô∏è Gagal membersihkan file sementara: {str(e)}")
        
        # Bersihkan file zip
        zip_path = src_path.with_suffix('.zip')
        try:
            if zip_path.exists():
                print(f"üßπ Membersihkan file zip {zip_path}...")
                zip_path.unlink()
                print("‚úÖ File zip berhasil dibersihkan")
        except Exception as e:
            print(f"‚ö†Ô∏è Gagal membersihkan file zip: {str(e)}")
    
    extract_button.on_click(on_extract_clicked)
    display(extract_button)