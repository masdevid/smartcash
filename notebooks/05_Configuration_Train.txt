# Cell 5: Konfigurasi Parameter Utama
# Widget input untuk konfigurasi
from ipywidgets import widgets
from IPython.display import display
from google.colab import userdata

# API Key
api_key_input = widgets.Text(
    value=userdata.get('ROBOFLOW_API_KEY'), 
    description='Roboflow API Key:',
    layout=widgets.Layout(width='500px'),
    style={'description_width': 'initial'}
)

# Backbone Selection
backbone_dropdown = widgets.Dropdown(
    options=[('EfficientNet-B4', 'efficientnet'), ('CSPDarknet (Default YOLOv5)', 'cspdarknet')],
    value='efficientnet',
    description='Backbone:',
    style={'description_width': 'initial'}
)

# Batch Size Selection
batch_size_slider = widgets.IntSlider(
    value=16,
    min=4,
    max=64,
    step=4,
    description='Batch Size:',
    style={'description_width': 'initial'}
)

# Epochs Slider
epochs_slider = widgets.IntSlider(
    value=30,
    min=5,
    max=100,
    step=5,
    description='Epochs:',
    style={'description_width': 'initial'}
)

# Learning Rate
lr_dropdown = widgets.Dropdown(
    options=[('0.001 (Default)', 0.001), ('0.01', 0.01), ('0.0001', 0.0001)],
    value=0.001,
    description='Learning Rate:',
    style={'description_width': 'initial'}
)

# Data Source
data_source_radio = widgets.RadioButtons(
    options=['roboflow', 'local'],
    value='roboflow',
    description='Sumber Data:',
    style={'description_width': 'initial'},
    layout={'width': 'max-content'}
)

# Detection Mode
detection_mode_radio = widgets.RadioButtons(
    options=['single', 'multi'],
    value='single',
    description='Mode Deteksi:',
    style={'description_width': 'initial'},
    layout={'width': 'max-content'}
)

# Roboflow Project Details
workspace_input = widgets.Text(
    value="", 
    description='Roboflow Workspace:',
    layout=widgets.Layout(width='500px'),
    style={'description_width': 'initial'}
)

project_input = widgets.Text(
    value="", 
    description='Roboflow Project:',
    layout=widgets.Layout(width='500px'),
    style={'description_width': 'initial'}
)

version_input = widgets.IntSlider(
    value=1,
    min=1,
    max=100,
    step=1,
    description='Version:',
    style={'description_width': 'initial'}
)

# Group displays for better layout
params_box = widgets.VBox([
    widgets.HBox([backbone_dropdown, data_source_radio]),
    widgets.HBox([batch_size_slider, epochs_slider]),
    widgets.HBox([lr_dropdown, detection_mode_radio]),
    api_key_input,
    workspace_input,
    project_input,
    version_input
])

display(params_box)

# Function to load current configuration
def load_config():
    """Load current configuration from file"""
    try:
        with open('configs/experiment_config.yaml', 'r') as f:
            loaded_config = yaml.safe_load(f)
            if loaded_config:
                return loaded_config
    except FileNotFoundError:
        try:
            with open('configs/base_config.yaml', 'r') as f:
                loaded_config = yaml.safe_load(f)
                if loaded_config:
                    return loaded_config
        except FileNotFoundError:
            print("‚ö†Ô∏è Tidak ada file konfigurasi ditemukan.")
            return None
    return None

# Function to update UI widgets based on loaded config
def update_ui_from_config(config):
    """Update UI widgets dengan nilai dari konfigurasi yang dimuat"""
    if not config:
        return
    
    # Update backbone dropdown
    backbone = config.get('model', {}).get('backbone')
    if backbone and backbone in ['efficientnet', 'cspdarknet']:
        backbone_dropdown.value = backbone
    
    # Update batch size
    batch_size = config.get('training', {}).get('batch_size')
    if batch_size and isinstance(batch_size, int):
        batch_size_slider.value = batch_size
    
    # Update epochs
    epochs = config.get('training', {}).get('epochs')
    if epochs and isinstance(epochs, int):
        epochs_slider.value = epochs
    
    # Update learning rate
    lr = config.get('training', {}).get('learning_rate')
    if lr and isinstance(lr, float):
        # Find closest learning rate in dropdown options
        lr_values = [opt[1] for opt in lr_dropdown.options]
        if lr in lr_values:
            lr_dropdown.value = lr
    
    # Update data source
    data_source = config.get('data', {}).get('source')
    if data_source and data_source in ['roboflow', 'local']:
        data_source_radio.value = data_source
    
    # Update detection mode
    detection_mode = config.get('detection_mode')
    if detection_mode and detection_mode in ['single', 'multi']:
        detection_mode_radio.value = detection_mode
    
    # Update API key
    api_key = config.get('data', {}).get('roboflow', {}).get('api_key')
    if api_key:
        api_key_input.value = api_key
    
    # Update workspace
    workspace = config.get('data', {}).get('roboflow', {}).get('workspace')
    if workspace:
        workspace_input.value = workspace
    
    # Update project
    project = config.get('data', {}).get('roboflow', {}).get('project')
    if project:
        project_input.value = project
    
    # Update version
    version = config.get('data', {}).get('roboflow', {}).get('version')
    if version and isinstance(version, int):
        version_input.value = version
    
    print("‚úÖ Konfigurasi berhasil dimuat ke antarmuka")

# Save Configuration Button
save_config_button = widgets.Button(
    description='Simpan Konfigurasi',
    button_style='primary',
    icon='save'
)

# Reload Configuration Button
reload_config_button = widgets.Button(
    description='Muat Ulang Konfigurasi',
    button_style='warning',
    icon='sync'
)

def on_save_config_button_clicked(b):
    
    global config  # ‚úÖ Declare global before using

    # Ensure config has required keys to prevent KeyError
    config.setdefault('data', {}).setdefault('roboflow', {})
    config.setdefault('model', {})
    config.setdefault('training', {})

    """Callback untuk menyimpan konfigurasi"""
    config['data']['roboflow']['api_key'] = api_key_input.value
    config['data']['roboflow']['workspace'] = workspace_input.value
    config['data']['roboflow']['project'] = project_input.value
    config['data']['roboflow']['version'] = version_input.value
    config['model']['backbone'] = backbone_dropdown.value
    config['model']['batch_size'] = batch_size_slider.value
    config['training']['batch_size'] = batch_size_slider.value
    config['training']['epochs'] = epochs_slider.value
    config['training']['learning_rate'] = lr_dropdown.value
    config['data']['source'] = data_source_radio.value
    config['detection_mode'] = detection_mode_radio.value
    
    # Set layers berdasarkan mode
    if detection_mode_radio.value == 'single':
        config['layers'] = ['banknote']
    else:
        config['layers'] = ['banknote', 'nominal', 'security']
    
    # Simpan konfigurasi
    with open('configs/experiment_config.yaml', 'w') as f:
        yaml.dump(config, f, default_flow_style=False)
    
    # Set environment variable untuk Roboflow API
    if api_key_input.value:
        os.environ["ROBOFLOW_API_KEY"] = api_key_input.value
    
    print(f"‚úÖ Konfigurasi berhasil disimpan di configs/experiment_config.yaml")
    print(f"üìÑ Mode deteksi: {detection_mode_radio.value}")
    print(f"üñ•Ô∏è Backbone: {backbone_dropdown.value}")
    print(f"üì¶ Batch size: {batch_size_slider.value}")
    print(f"üîÑ Epochs: {epochs_slider.value}")
    print(f"üìä Learning rate: {lr_dropdown.value}")
    print(f"üìÅ Sumber data: {data_source_radio.value}")
    print(f"üè¢ Workspace: {workspace_input.value}")
    print(f"üìÇ Project: {project_input.value}")
    print(f"üî¢ Version: {version_input.value}")
    
    with open('configs/experiment_config.yaml', 'r') as f:
        config = yaml.safe_load(f)

def on_reload_config_button_clicked(b):
    """Callback untuk memuat ulang konfigurasi dari file"""
    loaded_config = load_config()
    if loaded_config:
        update_ui_from_config(loaded_config)
        
        # Update global config variable
        global config
        config = loaded_config
    else:
        print("‚ö†Ô∏è Tidak dapat memuat konfigurasi dari file")

save_config_button.on_click(on_save_config_button_clicked)
reload_config_button.on_click(on_reload_config_button_clicked)

# Display buttons side by side in a HBox
button_box = widgets.HBox([save_config_button, reload_config_button])
display(button_box)