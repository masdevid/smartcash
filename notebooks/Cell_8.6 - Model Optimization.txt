# Cell 8.6: Memory Optimization - Untuk optimasi memori khusus Google Colab

from smartcash.utils.memory_optimizer import MemoryOptimizer
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display, clear_output

# Inisialisasi memory optimizer
memory_optimizer = MemoryOptimizer(logger=logger)

# UI untuk memori management
check_memory_button = widgets.Button(
    description='Cek Status Memori',
    button_style='info',
    icon='server'
)

clear_memory_button = widgets.Button(
    description='Bersihkan Memori GPU',
    button_style='warning',
    icon='trash'
)

optimize_button = widgets.Button(
    description='Optimasi Batch Size',
    button_style='success',
    icon='cogs'
)

memory_output = widgets.Output()

def on_check_memory_button_clicked(b):
    with memory_output:
        clear_output()
        memory_optimizer.check_gpu_status()
        
        # Tambahkan visualisasi penggunaan memori jika data tersedia
        stats = memory_optimizer.get_optimization_stats()
        if 'gpu_available' in stats and stats['gpu_available'] and 'total_memory' in stats:
            # Visualisasi penggunaan GPU
            plt.figure(figsize=(10, 4))
            plt.subplot(1, 2, 1)
            
            # Data untuk pie chart GPU
            gpu_labels = ['Terpakai', 'Bebas']
            gpu_sizes = [stats['used_memory'], stats['free_memory']]
            plt.pie(gpu_sizes, labels=gpu_labels, autopct='%1.1f%%', colors=['#ff9999','#66b3ff'])
            plt.title(f'Penggunaan GPU Memory ({stats["gpu_name"]})')
            
            # Data untuk pie chart RAM jika tersedia
            if 'ram_total_gb' in stats:
                plt.subplot(1, 2, 2)
                ram_labels = ['Terpakai', 'Bebas']
                ram_sizes = [stats['ram_used_gb'], stats['ram_free_gb']]
                plt.pie(ram_sizes, labels=ram_labels, autopct='%1.1f%%', colors=['#99ff99','#ffcc99'])
                plt.title('Penggunaan RAM')
            
            plt.tight_layout()
            plt.show()

def on_clear_memory_button_clicked(b):
    with memory_output:
        clear_output()
        freed_mem = memory_optimizer.clear_gpu_memory()
        print(f"‚úÖ Berhasil membersihkan {freed_mem:.2f} MB memori GPU")
        
        # Tampilkan status setelah pembersihan
        memory_optimizer.check_gpu_status()

def on_optimize_button_clicked(b):
    with memory_output:
        clear_output()
        
        if not torch.cuda.is_available():
            print("‚ùå GPU tidak tersedia. Optimasi batch size tidak dapat dilakukan.")
            return
            
        # Cek apakah model tersedia dari kode sebelumnya
        try:
            # Coba mendapatkan model
            print("üîç Mencari model_handler...")
            
            # Coba gunakan model_handler untuk membuat model baru
            print("üîÑ Membuat model untuk pengujian batch size...")
            model = model_handler.get_model()
            
            # Jalankan optimasi
            print("üîÑ Mencari batch size optimal...")
            optimal_batch = memory_optimizer.optimize_batch_size(model, target_memory_usage=0.7)
            
            print(f"‚úÖ Batch size optimal: {optimal_batch}")
            print(f"üí° Rekomendasi: Gunakan batch size {optimal_batch} untuk training")
            
            # Bersihkan model setelah selesai
            del model
            torch.cuda.empty_cache()
            
        except NameError:
            print("‚ö†Ô∏è Model handler tidak ditemukan. Pastikan Anda telah menjalankan sel untuk membuat model.")
        except Exception as e:
            print(f"‚ùå Terjadi kesalahan dalam optimasi: {str(e)}")

check_memory_button.on_click(on_check_memory_button_clicked)
clear_memory_button.on_click(on_clear_memory_button_clicked)
optimize_button.on_click(on_optimize_button_clicked)

# Tampilkan UI
display(widgets.VBox([
    widgets.HTML("<h2>üß† Optimasi Memori</h2>"),
    widgets.HTML("<p>Tools untuk mengoptimalkan penggunaan memori di Google Colab.</p>"),
    widgets.HBox([check_memory_button, clear_memory_button, optimize_button]),
    memory_output
]))

# Tampilkan status memori awal
with memory_output:
    memory_optimizer.check_gpu_status()