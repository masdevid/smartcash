# ================= [CHECKPOINT VIEWER] =================
# Cell untuk melihat dan mengelola checkpoint model

from datetime import datetime
import ipywidgets as widgets
from IPython.display import display, clear_output

# Tombol untuk melihat checkpoint
list_checkpoints_button = widgets.Button(
    description='Lihat Checkpoints',
    button_style='info',
    icon='list'
)

cleanup_checkpoints_button = widgets.Button(
    description='Bersihkan Checkpoints',
    button_style='warning',
    icon='trash'
)

# Tambahkan opsi untuk mounting Google Drive
try:
    from google.colab import drive
    drive_mounted = False
    
    mount_drive_button = widgets.Button(
        description='Mount Google Drive',
        button_style='primary',
        icon='hdd'
    )
    
    def on_mount_drive_button_clicked(b):
        global drive_mounted
        try:
            drive.mount('/content/drive')
            drive_mounted = True
            mount_drive_button.description = "Drive Terpasang ‚úì"
            mount_drive_button.button_style = "success"
            mount_drive_button.disabled = True
            logger.success("‚úÖ Google Drive berhasil terpasang di /content/drive")
        except Exception as e:
            logger.error(f"‚ùå Gagal memasang Google Drive: {str(e)}")
    
    mount_drive_button.on_click(on_mount_drive_button_clicked)
    
except ImportError:
    mount_drive_button = None
    drive_mounted = False
    logger.info("‚ÑπÔ∏è Tidak berjalan di Google Colab, opsi Google Drive tidak tersedia")

checkpoints_output = widgets.Output()

def on_list_checkpoints_button_clicked(b):
    with checkpoints_output:
        clear_output()
        checkpoint_manager.display_checkpoints()

def on_cleanup_checkpoints_button_clicked(b):
    with checkpoints_output:
        clear_output()
        
        # Konfirmasi
        print("üßπ Membersihkan checkpoint lama...")
        
        # Jalankan cleanup
        deleted = checkpoint_manager.cleanup_checkpoints(
            keep_best=True,
            keep_latest=True,
            max_epochs=5
        )
        
        # Tampilkan hasil
        print(f"‚úÖ Berhasil menghapus {deleted} checkpoint lama")
        
        # Tampilkan daftar yang tersisa
        print("\nDaftar checkpoint yang tersisa:")
        checkpoint_manager.display_checkpoints()

list_checkpoints_button.on_click(on_list_checkpoints_button_clicked)
cleanup_checkpoints_button.on_click(on_cleanup_checkpoints_button_clicked)

# Tambahkan fungsionalitas untuk menyalin ke Drive jika berjalan di Colab
if drive_mounted or mount_drive_button:
    copy_to_drive_button = widgets.Button(
        description='Salin ke Drive',
        button_style='primary',
        icon='cloud-upload'
    )
    
    drive_path_input = widgets.Text(
        value='/content/drive/MyDrive/SmartCash/weights',
        description='Path di Drive:',
        style={'description_width': 'initial'},
        layout={'width': '400px'}
    )
    
    def on_copy_to_drive_button_clicked(b):
        with checkpoints_output:
            clear_output()
            
            if not drive_mounted and mount_drive_button:
                print("‚ö†Ô∏è Google Drive belum terpasang. Silakan klik tombol 'Mount Google Drive' terlebih dahulu.")
                return
                
            # Dapatkan checkpoint terbaik
            best_checkpoint = checkpoint_manager.find_best_checkpoint()
            if not best_checkpoint:
                print("‚ö†Ô∏è Tidak ada checkpoint yang ditemukan untuk disalin.")
                return
                
            # Salin ke Drive
            result_path = checkpoint_manager.copy_to_drive(
                checkpoint_path=best_checkpoint,
                drive_dir=drive_path_input.value
            )
            
            if result_path:
                print(f"‚úÖ Checkpoint berhasil disalin ke {result_path}")
            else:
                print("‚ùå Gagal menyalin checkpoint ke Drive.")
    
    copy_to_drive_button.on_click(on_copy_to_drive_button_clicked)

# Tampilkan UI
ui_components = [
    widgets.HTML("<h2>üì¶ Pengelolaan Checkpoint</h2>"),
    widgets.HTML("<p>Kelola checkpoint model yang tersimpan di sistem.</p>"),
    widgets.HBox([list_checkpoints_button, cleanup_checkpoints_button])
]

if mount_drive_button:
    ui_components.append(widgets.HTML("<h3>üîÑ Google Drive Integration</h3>"))
    ui_components.append(widgets.VBox([
        mount_drive_button,
        widgets.HBox([drive_path_input, copy_to_drive_button]) if 'copy_to_drive_button' in locals() else None
    ]))
    ui_components.append(widgets.HTML("<p><i>Mount Google Drive untuk menyimpan checkpoint secara permanen</i></p>"))

ui_components.append(checkpoints_output)

display(widgets.VBox([comp for comp in ui_components if comp is not None]))

# Tampilkan daftar checkpoint awal
with checkpoints_output:
    checkpoint_manager.display_checkpoints()