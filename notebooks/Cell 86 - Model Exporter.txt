# Cell 86: Model Exporter (refactored)

import torch
import os
import pickle
from datetime import datetime

# Import komponen UI dan handler
from smartcash.ui_components.model_components import create_model_exporter_ui
from smartcash.handlers.ui_handlers.model_handlers import setup_model_exporter_handlers

# Setup logger
from smartcash.utils.logger import get_logger
logger = get_logger("model_exporter", log_to_console=True, log_to_file=True, log_to_colab=True)

# Memuat model_handler dan config dari cell sebelumnya jika tersedia
if 'model_handler' not in globals():
    try:
        # Load config
        try:
            with open('config.pkl', 'rb') as f:
                config = pickle.load(f)
        except:
            config = {
                'model': {
                    'backbone': 'efficientnet',
                    'num_classes': 17,
                    'img_size': [640, 640]
                },
                'layers': ['banknote']
            }
            
        # Initialize model handler
        from smartcash.handlers.model_handler import ModelHandler
        model_handler = ModelHandler(
            config=config, 
            config_path='configs/base_config.yaml',
            num_classes=config.get('model', {}).get('num_classes', 7)
        )
        logger.info("✅ Model handler berhasil dibuat")
    except Exception as e:
        logger.error(f"❌ Gagal membuat model handler: {str(e)}")
        raise

# Inisialisasi CheckpointHandler
try:
    from smartcash.handlers.checkpoint_handler import CheckpointHandler
    checkpoint_handler = CheckpointHandler(logger=logger)
except Exception as e:
    logger.warning(f"⚠️ Error initializing CheckpointHandler: {str(e)}")
    # Fallback to minimal implementation
    class SimpleCheckpointHandler:
        def __init__(self, logger):
            self.logger = logger
            self.checkpoint_dir = "runs/train/weights"
            os.makedirs(self.checkpoint_dir, exist_ok=True)
            
        def find_best_checkpoint(self):
            # Return the latest checkpoint for simplicity
            import glob
            checkpoints = glob.glob(f"{self.checkpoint_dir}/*best*.pt")
            if checkpoints:
                return sorted(checkpoints, key=os.path.getmtime)[-1]
            return None
    
    checkpoint_handler = SimpleCheckpointHandler(logger)

# Inisialisasi model exporter
try:
    from smartcash.utils.model_exporter import ModelExporter
    model_exporter = ModelExporter(model_handler, checkpoint_handler, logger)
except Exception as e:
    logger.warning(f"⚠️ Error initializing ModelExporter: {str(e)}")
    # Fallback to minimal implementation
    class SimpleModelExporter:
        def __init__(self, model_handler, checkpoint_handler, logger):
            self.model_handler = model_handler
            self.checkpoint_handler = checkpoint_handler
            self.logger = logger
            self.export_dir = "exports"
            os.makedirs(self.export_dir, exist_ok=True)
            
        def export_to_torchscript(self, optimize=True):
            self.logger.info("Exporting to TorchScript")
            # Would implement actual export here
            export_path = f"{self.export_dir}/model_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pt"
            # Create an empty placeholder file
            with open(export_path, 'w') as f:
                f.write("placeholder")
            return export_path
            
        def export_to_onnx(self, opset_version=12):
            self.logger.info(f"Exporting to ONNX with opset {opset_version}")
            # Would implement actual export here
            export_path = f"{self.export_dir}/model_{datetime.now().strftime('%Y%m%d_%H%M%S')}.onnx"
            # Create an empty placeholder file
            with open(export_path, 'w') as f:
                f.write("placeholder")
            return export_path
            
        def copy_to_drive(self, export_path):
            if os.path.exists("/content/drive"):
                drive_dir = "/content/drive/MyDrive/SmartCash/exports"
                os.makedirs(drive_dir, exist_ok=True)
                import shutil
                drive_path = f"{drive_dir}/{os.path.basename(export_path)}"
                shutil.copy2(export_path, drive_path)
                return drive_path
            return None
    
    model_exporter = SimpleModelExporter(model_handler, checkpoint_handler, logger)

# Buat UI komponen untuk ekspor model
ui_components = create_model_exporter_ui()

# Setup handler untuk komponen UI
setup_model_exporter_handlers(ui_components, model_exporter, logger)

# Tampilkan UI
display(ui_components['ui'])