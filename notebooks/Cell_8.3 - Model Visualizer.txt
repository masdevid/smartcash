# Cell 8.3: Model Visualization - Untuk visualisasi model

from smartcash.utils.model_visualizer import ModelVisualizer
import ipywidgets as widgets
from IPython.display import display, clear_output

# Buat tombol untuk demonstrasi visualisasi model
create_model_button = widgets.Button(
    description='Buat Model & Visualisasikan',
    button_style='primary',
    icon='rocket'
)

visualization_output = widgets.Output()

def on_create_model_button_clicked(b):
    """Callback untuk membuat dan memvisualisasikan model"""
    with visualization_output:
        clear_output()
        
        try:
            # Buat model
            model = model_handler.get_model()
            
            # Visualisasikan model
            visualizer = ModelVisualizer(model, logger)
            
            # Tampilkan informasi parameter
            visualizer.count_parameters()
            
            # Visualisasikan backbone
            visualizer.visualize_backbone()
            
            # Visualisasikan output layer jika tersedia
            print("\nüîç Visualisasi Output Layer:")
            visualizer.visualize_layer_outputs()
            
            # Coba tampilkan summary jika torchsummary tersedia
            try:
                import torchsummary
                print("\nüîç Detail struktur model:")
                visualizer.print_model_summary()
            except ImportError:
                print("\n‚ö†Ô∏è Untuk melihat detail struktur model, install torchsummary:")
                print("!pip install torchsummary")
            
            # Bersihkan model
            del model
            torch.cuda.empty_cache()
            
        except Exception as e:
            logger.error(f"‚ùå Gagal membuat atau memvisualisasikan model: {str(e)}")
            import traceback
            traceback.print_exc()

create_model_button.on_click(on_create_model_button_clicked)

# Tambahkan dropdown untuk memilih backbone dan mode
backbone_select = widgets.Dropdown(
    options=[
        ('EfficientNet-B4', 'efficientnet'),
        ('CSPDarknet', 'cspdarknet')
    ],
    value='efficientnet',
    description='Backbone:',
    style={'description_width': 'initial'}
)

mode_select = widgets.Dropdown(
    options=[
        ('Single Layer', 'single'),
        ('Multiple Layers', 'multi')
    ],
    value='single',
    description='Mode:',
    style={'description_width': 'initial'}
)

# Visualisasi modul
viz_module_select = widgets.RadioButtons(
    options=[
        ('Full Model', 'full'),
        ('Backbone Only', 'backbone'),
        ('Parameters', 'parameters')
    ],
    value='full',
    description='Visualisasi:',
    style={'description_width': 'initial'},
    layout={'width': 'max-content'}
)

# Tampilkan UI
display(widgets.VBox([
    widgets.HTML("<h2>üîç Visualisasi Model</h2>"),
    widgets.HTML("<p>Visualisasi struktur dan parameter model berdasarkan konfigurasi.</p>"),
    widgets.HBox([backbone_select, mode_select]),
    viz_module_select,
    create_model_button,
    visualization_output
]))