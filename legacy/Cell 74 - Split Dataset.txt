# Cell 7.4: Split Dataset

# Pastikan objek global tersedia
try:
    with open('data_globals.pkl', 'rb') as f:
        globals_dict = pickle.load(f)
    
    data_manager = globals_dict['data_manager']
    aug_manager = globals_dict['aug_manager']
    config = globals_dict['config']
    logger = globals_dict['logger']
except Exception as e:
    print(f"‚ùå Error loading global objects: {str(e)}")
    print("üí° Jalankan Cell 7.1 terlebih dahulu untuk menginisialisasi dataset")

# Import modul tambahan yang diperlukan
from smartcash.handlers.unified_preprocessing_handler import UnifiedPreprocessingHandler

# Widget untuk mengontrol split
train_ratio_slider = widgets.FloatSlider(
    value=0.7,
    min=0.5,
    max=0.9,
    step=0.05,
    description='Ratio Train:',
    style={'description_width': 'initial'}
)

valid_ratio_slider = widgets.FloatSlider(
    value=0.15,
    min=0.05,
    max=0.3,
    step=0.05,
    description='Ratio Valid:',
    style={'description_width': 'initial'}
)

test_ratio_slider = widgets.FloatSlider(
    value=0.15,
    min=0.05,
    max=0.3,
    step=0.05,
    description='Ratio Test:',
    style={'description_width': 'initial'}
)

total_ratio_text = widgets.HTML(
    value="<b>Total Ratio: 1.0</b> ‚úÖ",
)

def update_total_ratio(*args):
    """Update tampilan total ratio"""
    total = train_ratio_slider.value + valid_ratio_slider.value + test_ratio_slider.value
    
    if abs(total - 1.0) < 0.001:  # Mendekati 1.0
        total_ratio_text.value = f"<b>Total Ratio: {total:.2f}</b> ‚úÖ"
        split_button.disabled = False
    else:
        total_ratio_text.value = f"<b>Total Ratio: {total:.2f}</b> ‚ùå (harus 1.0)"
        split_button.disabled = True

train_ratio_slider.observe(update_total_ratio, names='value')
valid_ratio_slider.observe(update_total_ratio, names='value')
test_ratio_slider.observe(update_total_ratio, names='value')

split_button = widgets.Button(
    description='Split Dataset',
    button_style='primary',
    icon='random'
)

split_status_output = widgets.Output()

def on_split_button_clicked(b):
    """Callback untuk split dataset"""
    # Disable tombol selama proses
    split_button.disabled = True
    split_button.description = "Memproses..."
    
    with split_status_output:
        clear_output()
        
        train_ratio = train_ratio_slider.value
        valid_ratio = valid_ratio_slider.value
        test_ratio = test_ratio_slider.value
        
        logger.info(f"üîÑ Memulai split dataset dengan rasio: Train={train_ratio:.2f}, Valid={valid_ratio:.2f}, Test={test_ratio:.2f}...")
        
        # Periksa keberadaan direktori all_data dan buat jika belum ada
        all_data_dir = Path('data/all_data')
        all_data_images = all_data_dir / 'images'
        all_data_labels = all_data_dir / 'labels'
        
        if not all_data_images.exists():
            all_data_images.mkdir(parents=True, exist_ok=True)
            logger.warning(f"‚ö†Ô∏è Direktori 'data/all_data/images' dibuat karena belum ada!")
            
        if not all_data_labels.exists():
            all_data_labels.mkdir(parents=True, exist_ok=True)
            
        # Periksa apakah ada file di direktori
        image_files = list(all_data_images.glob('*.jpg')) + list(all_data_images.glob('*.jpeg')) + list(all_data_images.glob('*.png'))
        
        if not image_files:
            logger.error(f"‚ùå Tidak ada gambar dalam direktori {all_data_images}!")
            logger.info(f"üí° Tip: Salin dataset hasil download ke direktori ini jika belum ada.")
            
            # Option to copy from Roboflow download
            display(HTML("<p><strong>Tidak ada gambar di direktori data/all_data/images.</strong></p>"))
            display(HTML("<p>Apakah Anda ingin menyalin data dari hasil download Roboflow?</p>"))