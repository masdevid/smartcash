# Cell 40 - Konfigurasi Global (refactored)

# ===== 1. IMPORT MODULES =====
import torch
from pathlib import Path
from IPython.display import display

# Import UI components dan handlers
from smartcash.ui_components.config_components import create_global_config_ui
from smartcash.ui_handlers.config_handlers import setup_global_config_handlers

# Import centralized managers
from smartcash.utils.config_manager import ConfigManager
from smartcash.utils.logger import get_logger, SmartCashLogger
from smartcash.utils.environment_manager import EnvironmentManager
from smartcash.utils.layer_config_manager import get_layer_config

# ===== 2. INITIALIZE MANAGERS =====
# Setup environment manager
env_manager = EnvironmentManager()

# Setup logger with environment context
logger = get_logger("global_config", 
                   log_to_console=True, 
                   log_to_file=True, 
                   log_to_colab=env_manager.is_colab)

# Setup config manager and load or create configuration
config_manager = ConfigManager(
    base_dir=str(env_manager.base_dir),
    logger=logger
)

# Try to load existing config or create default
config = config_manager.load_config(use_defaults=True)

# ===== 3. SETUP LAYER CONFIG =====
# Inisialisasi layer config manager
layer_config = get_layer_config()
active_layers = config_manager.get('layers', ['banknote'])
available_layers = layer_config.get_layer_names()

# Log layer information
logger.info(f"üîç Layer yang diaktifkan: {active_layers}")

# Analisis konfigurasi layer
for layer in active_layers:
    layer_info = layer_config.get_layer_config(layer)
    if layer_info:
        class_names = layer_info['classes']
        class_ids = layer_info['class_ids']
        logger.info(f"üìä Layer '{layer}': {len(class_names)} kelas ({', '.join(class_names)})")
    else:
        logger.warning(f"‚ö†Ô∏è Layer '{layer}' tidak ditemukan dalam konfigurasi")

# Jumlah total kelas
total_classes = layer_config.get_total_classes()
logger.info(f"üî¢ Total kelas yang terdeteksi: {total_classes}")

# ===== 4. DISPLAY SYSTEM INFO =====
# Periksa ketersediaan GPU
if torch.cuda.is_available():
    gpu_info = f"GPU: {torch.cuda.get_device_name(0)}"
    gpu_memory = f"Memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.2f} GB"
    logger.info(f"üñ•Ô∏è {gpu_info}, {gpu_memory}")
else:
    logger.warning("‚ö†Ô∏è GPU tidak terdeteksi, menggunakan CPU")

# ===== 5. CREATE AND SETUP UI =====
# Buat UI komponen
ui_components = create_global_config_ui(
    config=config_manager.config, 
    base_dir=env_manager.base_dir,
    active_layers=active_layers,
    available_layers=available_layers
)

# Setup handlers for UI components
setup_global_config_handlers(
    ui_components=ui_components,
    config=config_manager,
    logger=logger
)

# Display the UI
display(ui_components['ui'])

logger.success("‚úÖ Konfigurasi global siap digunakan")