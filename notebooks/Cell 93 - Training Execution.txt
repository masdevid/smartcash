# Cell 93 - Training Execution (refactored)

# ===== 1. IMPORT MODULES =====
from IPython.display import display
import gc
import torch

# Import UI components dan handlers
from smartcash.ui_components.training_components import create_training_ui
from smartcash.ui_handlers.training_execution_handlers import setup_training_handlers
from smartcash.ui_handlers.common_utils import memory_manager

# Import centralized managers
from smartcash.utils.config_manager import ConfigManager
from smartcash.utils.logger import get_logger
from smartcash.utils.environment_manager import EnvironmentManager

# ===== 2. INITIALIZE MANAGERS =====
# Setup environment manager
env_manager = EnvironmentManager()

# Setup logger with environment context
logger = get_logger("training_execution", 
                   log_to_console=True, 
                   log_to_file=True, 
                   log_to_colab=env_manager.is_colab)

# Setup config manager and load configuration
config_manager = ConfigManager(logger=logger)
config = config_manager.load_config()

# ===== 3. LOAD TRAINING COMPONENTS =====
try:
    # Attempt to load training components from pickle or previous cells
    import pickle
    with open('training_components.pkl', 'rb') as f:
        components = pickle.load(f)
    
    # Extract required components
    pipeline = components.get('pipeline')
    model_handler = components.get('model_handler')
    checkpoint_handler = components.get('checkpoint_handler')
    experiment_tracker = components.get('experiment_tracker')
    dataloaders = components.get('dataloaders')
    
    # Validate required components
    required_components = ['pipeline', 'model_handler', 'checkpoint_handler', 'dataloaders']
    missing_components = [comp for comp in required_components if comp not in components or components[comp] is None]
    
    if missing_components:
        logger.warning(f"⚠️ Missing required components: {', '.join(missing_components)}")
        raise ValueError("Missing required training components")
        
    logger.success("✅ Komponen training berhasil dimuat")
    
except Exception as e:
    logger.error(f"❌ Komponen training belum diinisialisasi: {str(e)}")
    logger.info("ℹ️ Jalankan Pipeline Initialization terlebih dahulu untuk menginisialisasi pipeline")
    
    # Create placeholder components for UI display
    pipeline = None
    model_handler = None
    checkpoint_handler = None
    experiment_tracker = None
    dataloaders = {}

# ===== 4. CREATE AND SETUP UI =====
# Create UI components with configuration context
ui_components = create_training_ui(
    config=config, 
    is_colab=env_manager.is_colab
)

# Setup handlers if required components are available
if pipeline and dataloaders and checkpoint_handler:
    # Setup handlers and get metrics tracker
    metrics_tracker, ui_components = setup_training_handlers(
        ui_components=ui_components,
        pipeline=pipeline,
        dataloaders=dataloaders,
        checkpoint_handler=checkpoint_handler,
        config=config, 
        logger=logger
    )
    logger.info("✅ Training handlers berhasil disetup")
else:
    logger.warning("⚠️ UI dibuat tetapi fungsi tidak akan berjalan karena komponen yang diperlukan tidak tersedia")

# ===== 5. DISPLAY UI =====
# Display the UI
display(ui_components['ui'])

# ===== 6. CLEANUP =====
# Perform memory cleanup to free resources
with memory_manager():
    pass  # Memory management handled by context manager

logger.info("✅ UI Training Execution berhasil diinisialisasi")